<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chuck@Home</title><link href="http://blog.dasroot.net/" rel="alternate"></link><link href="http://blog.dasroot.net/feeds/misc.atom.xml" rel="self"></link><id>http://blog.dasroot.net/</id><updated>2014-12-16T19:12:00-05:00</updated><entry><title>Container Networking with Flannel</title><link href="http://blog.dasroot.net/container-networking-with-flannel.html" rel="alternate"></link><updated>2014-12-16T19:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-12-16:container-networking-with-flannel.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/bCvl-TsxVXA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;When leveraging juju with LXC in cloud environments - networking has been a constant thorn in my side as I attempt to scale out farms of services in their full container glory. Thanks to the work by &lt;a href="http://blog.kapilt.com/"&gt;Hazmat&lt;/a&gt; (who brought us the Digital Ocean Provider) - there is a new development in this sphere ready for testing over this holiday season.&lt;/p&gt;
&lt;h3&gt;Container Networking with Juju in the cloud&lt;/h3&gt;
&lt;p&gt;Juju by default supports colocating services with LXC containers and KVM machines. LXC is all the rage these days, as linux containers are light weight kernel virtualized cgroups. Akin to BSD Jails - but not quite. Its a awesome solution where you dont care about resource isolation, and Just want your application to run within its own happy root, and live on churning away at whatever you might throw at it.&lt;/p&gt;
&lt;p&gt;While this is great - it has a major achilles tendon presently in the Juju sphere. Cross-host communication is all but non-existant. In order to really scale and use LXC containers you need a beefy host to warehouse all the containers you can stuff on its disk. This isn't practical in scale out situations where your needs change on a day to day basis. You wind up losing out on the benefits of commodity hardware.  &lt;/p&gt;
&lt;p&gt;Flannel knocks this restriction out with great justice. Allow me to show you how:&lt;/p&gt;
&lt;h3&gt;Model Density Deployments with Juju and LXC&lt;/h3&gt;
&lt;p&gt;I'm going to assume you've done a few things.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a bootstrapped environment&lt;/li&gt;
&lt;li&gt;Have at least 3 machines available to you&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start off by deploying Etcd and Flannel&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;hazmat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etcd&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;hazmat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;flannel&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt; &lt;span class="n"&gt;flannel&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="n"&gt;flannel&lt;/span&gt; &lt;span class="n"&gt;etcd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; You must wait for the flannel units to have completed their setup run before you deploy any lxc containers to the host. Otherwise you will be racing the virtual device setup, and this may misconfigure the networking.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With Flannel and Etcd running, you're now ready to deploy your services in LXC containers. Assuming the Flannel machine's provisioned by Juju are machineid 2, and 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mediawiki&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;haproxy&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="n"&gt;mediawiki&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="n"&gt;mediawiki&lt;/span&gt; &lt;span class="n"&gt;haproxy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; We deployed haproxy to the host, and not to an LXC container. This is to provide access to the containerized services from the public interface - flannel only solves cross-host private networking with the containers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This may take a short while to complete, as the LXC containers are fetching cloud images, and generating templates just like the Juju local provider workflow. Typically this is done in a couple minutes.&lt;/p&gt;
&lt;p&gt;Once everything is online and ready for inspection, open a web-browser pointed at your Haproxy public ip, and you should see a fresh installation of Mediawiki.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;</summary><category term="juju"></category><category term="networking"></category><category term="planet"></category><category term="flannel"></category><category term="lxc"></category></entry><entry><title>Reconnecting Juju Connectivity</title><link href="http://blog.dasroot.net/reconnecting-juju-connectivity.html" rel="alternate"></link><updated>2014-11-07T11:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-11-07:reconnecting-juju-connectivity.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;When disaster strikes, the first instinct is to panic right? You don't need to panic just yet when your IT staff has come to you, the devopsy admin sent from the future with cool tools, and tells you that there is a new networking policy change. And every one of your units are going to under go an IP Refresh, and domain change. &lt;/p&gt;
&lt;p&gt;Juju uses flat files to store configuration on your workstation, and the nodes, so all you need to do is do some note taking on what the IP is to your bootstrap node - and juju will take care of the rest for you.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Restoring connectivity to the state server from your client workstation&lt;/h3&gt;
&lt;p&gt;You will need to edit the &lt;code&gt;jenv&lt;/code&gt; that juju created for the environment during &lt;code&gt;juju bootstrap&lt;/code&gt; which will be located: &lt;code&gt;$JUJU_HOME/environments/&amp;lt;environment_name&amp;gt;.jenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;jenv&lt;/code&gt; has a yaml file format, so be familiar with that so you know what to look for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;173.173.4.187&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17070&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;172.187.3.21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;17070&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each line item below &lt;code&gt;state-servers&lt;/code&gt; will need to be updated with the new state servers address. You may have one or more listed here depending on if you did &lt;code&gt;juju ensure-availability&lt;/code&gt; - which will turn a single node state server into a High Availability state server.&lt;/p&gt;
&lt;h3&gt;Restoring connectivity to the state server from juju-agents&lt;/h3&gt;
&lt;p&gt;There will be 2 or more configuration files to edit per agent. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 for the machine&lt;/li&gt;
&lt;li&gt;1 for each unit-agent of service you deploy to the machine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given the scenario:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;elasticsearch&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will have 2 files to edit - the Machine conf, and the elasticsearch conf. If you have co-located any services on the machine you will have an additional config per service added to the machine. (Dont forget about KVM and LXC containers, as this also increases the number of conf files to edit, and will reside in that services container)&lt;/p&gt;
&lt;p&gt;You will find the Machine configuration in &lt;code&gt;/var/lib/juju/agents/machine-1/agent.conf&lt;/code&gt; 
You will find the service configuration in &lt;code&gt;/var/lib/juju/agents/unit-elasticsearch-0/unit.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;then kill jujud and let upstart restart it&lt;/p&gt;
&lt;p&gt;This has all been documented on &lt;a href="http://askubuntu.com/questions/540209/ip-domainname-of-juju-master-or-slaves-changes"&gt;AskUbuntu&lt;/a&gt; with the user that joined #juju on irc.freenode.net - trying to discover how to do this themselves. If you've got the time, give them a quick upvote for a great question/answer&lt;/p&gt;</summary><category term="juju"></category><category term="planet"></category></entry><entry><title>A Laymans Guide to the "Big Data" Ecosystem</title><link href="http://blog.dasroot.net/a-laymans-guide-to-the-big-data-ecosystem.html" rel="alternate"></link><updated>2014-11-06T12:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-11-06:a-laymans-guide-to-the-big-data-ecosystem.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Big Data Wordcloud" src="images/2014/Nov/BigData_2267x1146_white.png" /&gt;
"Big Data" is now synonymous with marketing, and buzzword bingo. As a layman getting started in the ecosystem I found it truly difficult to really grasp what it was, and where I should be looking to get started. This will be the first post in a multi-post series breaking down the big-data stack, leveraging examples with Juju.&lt;/p&gt;
&lt;h2&gt;Disambiguation of the term 'Hadoop'&lt;/h2&gt;
&lt;p&gt;I dont know about you but when I think "Big Data" - I think of one thing. The 800lb Gorilla in the room and that's &lt;strong&gt;Hadoop&lt;/strong&gt;. It's become synonymous with crunching petabytes of data in the name of everything from medical research, market analysis, to crunching website results powering your favorite search engine and computing trends over long periods of time. But that's kind of a misnomer, as there is an entire ecosystem around this software; and I think Wikipedia has defined this better than I ever could:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Apache Hadoop&lt;/code&gt; is an open-source software framework for distributed storage and distributed processing of Big Data on clusters of commodity hardware. Its Hadoop Distributed File System (HDFS) splits files into large blocks (default 64MB or 128MB) and distributes the blocks amongst the nodes in the cluster. For processing the data, the Hadoop Map/Reduce ships code (specifically Jar files) to the nodes that have the required data, and the nodes then process the data in parallel. This approach leverages data locality, in contrast to conventional HPC architecture which usually relies on a parallel file system (compute and data separated, but connected with high-speed networking).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Source: &lt;a href="http://en.wikipedia.org/wiki/Apache_Hadoop"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, in summation - Hadoop is really an ecosystem of applications and utilities (despite the core map-reduce engine being titled 'hadoop'). To further confuse and complicate things there are several vendors creating Hadoop application stacks. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Apache&lt;/strong&gt; - &lt;a href="http://hadoop.apache.org/"&gt;Open Source Vanilla Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudera&lt;/strong&gt; - &lt;a href="http://www.cloudera.com/content/cloudera/en/home.html"&gt;Cloudera Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hortonworks&lt;/strong&gt; - &lt;a href="http://hortonworks.com"&gt;Hortonworks Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapR&lt;/strong&gt; - &lt;a href="https://www.mapr.com/"&gt;MapR Hadoop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pivotal&lt;/strong&gt; - &lt;a href="http://www.pivotal.io/big-data/pivotal-hd"&gt;Pivotal HD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do you know which one to pick? "Which one makes &lt;strong&gt;my&lt;/strong&gt; job easier?" you might ask. At the end of the day each vendor mixes in their own patches and special flavor of management on top of the Vanilla Apache Hadoop. Some give the patches back, some keep them proprietary to their distribution. It's all about preference, which approach appeals to you, and how much time you want to spend getting started. For the sake of brevity, and attention - I'll pick a middle of the road candidate and take a look at just the major applications in the stack and give illustrations using the Hortonworks flavor.&lt;/p&gt;
&lt;h2&gt;Map Reduce Engines&lt;/h2&gt;
&lt;h3&gt;Hadoop&lt;/h3&gt;
&lt;h4&gt;The core component(s)&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Dancing hadoop elephants" src="/content/images/2014/Nov/Hadoop_elephants.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;The base Apache Hadoop framework (as of v2) is composed of the following modules:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hadoop Common&lt;/code&gt; – contains libraries and utilities needed by other Hadoop modules.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hadoop Distributed File System (HDFS)&lt;/code&gt; – a distributed file-system that stores data on commodity machines, providing very high aggregate bandwidth across the cluster.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hadoop YARN&lt;/code&gt; – a resource-management platform responsible for managing compute resources in clusters and using them for scheduling of users' applications.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hadoop MapReduce&lt;/code&gt; – a programming model for large scale data processing.&lt;/p&gt;
&lt;h4&gt;How to deploy Hadoop Core quickly with juju as a reference architecture&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;hdp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;processing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Hadoop Core Bundle Depiction from Juju" src="/content/images/2014/Nov/Selection_171-1.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Tez&lt;/h3&gt;
&lt;h4&gt;High Preformance Bach Processing Engine&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Nov/ApacheTezLogo_lowres.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Tez&lt;/code&gt; generalizes the MapReduce paradigm to a more powerful framework based on expressing computations as a dataflow graph. Tez is not meant directly for end-users – in fact it enables developers to build end-user applications with much better performance and flexibility. Hadoop has traditionally been a batch-processing platform for large amounts of data. However, there are a lot of use cases for near-real-time performance of query processing. There are also several workloads, such as Machine Learning, which do not fit will into the MapReduce paradigm. Tez helps Hadoop address these use cases.&lt;/p&gt;
&lt;h4&gt;How to deploy Tez quickly with juju as a reference architecture&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;performance&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;batch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;processing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Tez Bundle Depiction from Juju" src="/content/images/2014/Nov/Selection_172.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Distributed Stream Processing&lt;/h2&gt;
&lt;h3&gt;Storm&lt;/h3&gt;
&lt;h4&gt;Real Time Processing of Data Streams&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Nov/storm_logo1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Storm is a distributed computation framework written predominantly in the Clojure programming language. It uses custom created "spouts" and "bolts" to define information sources and manipulations to allow batch, distributed processing of streaming data. &lt;/p&gt;
&lt;p&gt;A Storm application is designed as a topology in the shape of a &lt;a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph"&gt;directed acyclic graph (DAG)&lt;/a&gt; with spouts and bolts acting as the graph vertices. Edges on the graph are named streams, and direct data from one node to another. Together, the topology acts as a data transformation pipeline. At a superficial level the general topology structure is similar to a MapReduce job, with the main difference being that data is processed in real-time as opposed to in individual batches. Additionally, Storm topologies run indefinitely until killed, while a MapReduce job DAG must eventually end.&lt;/p&gt;
&lt;h4&gt;How to deploy Storm quickly with juju as a reference architecture&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;realtime&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;storm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Storm Bundle Depiction from Juju" src="/content/images/2014/Nov/Selection_170-1.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Client Libraries and Supporting Applications for writing Map/Reduce&lt;/h2&gt;
&lt;h3&gt;Hive&lt;/h3&gt;
&lt;h4&gt;Write Map/Reduce applications with a variant of SQL&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Hadoop Hive Logo" src="/content/images/2014/Nov/hive_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Apache Hive is a data warehouse infrastructure built on top of Hadoop for providing data summarization, query, and analysis. Hive supports analysis of large datasets stored in Hadoop's HDFS and compatible file systems such as Amazon S3 filesystem. It provides an SQL-like language called HiveQL with schema on read and transparently converts queries to map/reduce, Apache Tez and in the future Spark jobs. All three execution engines can run in Hadoop YARN. To accelerate queries, it provides indexes, including bitmap indexes.&lt;/p&gt;
&lt;h4&gt;How to deploy Hive quickly with juju as a reference architecture&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;like&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Hive Bundle Depiction from Juju" src="/content/images/2014/Nov/Selection_169-1.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Pig&lt;/h3&gt;
&lt;h4&gt;The Rapid Latin Language of Big Data&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Pig the rapid map reduce writer" src="/content/images/2014/Nov/pig-on-elephant.png" /&gt;&lt;/p&gt;
&lt;p&gt;Pig is a high-level platform for creating MapReduce programs used with Hadoop. The language for this platform is called Pig Latin.Pig Latin abstracts the programming from the Java MapReduce idiom into a notation which makes MapReduce programming high level, similar to that of SQL for RDBMS systems. Pig Latin can be extended using User Defined Functions which the user can write in Java, Python, JavaScript, Ruby or Groovy and then call directly from the language.&lt;/p&gt;
&lt;h4&gt;How to deploy Pig quickly with juju as a reference architecture&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;quickstart&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;analytics&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pig&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;latin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Pig Bundle Depiction from Juju" src="/content/images/2014/Nov/Selection_168-2.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Breaking down comprehension on Pig and Hive - and how they work in the ecosystem&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Diagram of Pig vs Hive - credit: http://www.bigdatatrendz.com/2013/10/introduction-to-apache-hive-and-pig.html" src="/content/images/2014/Nov/PigVsHive.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pig&lt;/code&gt; and &lt;code&gt;Hive&lt;/code&gt; both bundle client side application libraries, and deployed daemon components that bolt on additional functionality for the data scientist working with the data in HDFS or SQL tables. This allows a powerful combination for end-users to write map/reduce applications rapidly.&lt;/p&gt;
&lt;p&gt;While they are not stand-alone entities in the hadoop bundle, they do provide a lower barrier to entry for end-users looking to get into the ecosystem without learning all the intricacies of learning Map/Reduce programming with just the core Hadoop stack.&lt;/p&gt;
&lt;p&gt;Both of these applications communicate with the yarn-master to load a JIT compiled map/reduce application. &lt;code&gt;Hive&lt;/code&gt; and &lt;code&gt;Pig&lt;/code&gt; both have their own syntax, and translate the queries to a respective Map/Reduce jar that is then distributed to do the queries. &lt;/p&gt;
&lt;p&gt;With the core components broken down - we're ready to take a look at the new kid on the block in the next post in the series:  &lt;strong&gt;Spark for the layman&lt;/strong&gt;. &lt;/p&gt;</summary><category term="juju"></category><category term="planet"></category><category term="hadoop"></category><category term="big-data-2"></category></entry><entry><title>Juju Powered Radio! A protoduction experiment.</title><link href="http://blog.dasroot.net/juju-powered-radio.html" rel="alternate"></link><updated>2014-09-26T19:09:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-09-26:juju-powered-radio.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;September 26'th I undertook a rather daunting task of trialing something I strongly believe in that really took me out of my comfort zone and put me front and center of an audience's attention, for not only my talents, but also the technical implementation of their experience.&lt;/p&gt;
&lt;h3&gt;The back story&lt;/h3&gt;
&lt;p&gt;I've been amateur &lt;a href="http://mixcloud.com/rahlgenesis/"&gt;DJ&lt;/a&gt;'ing on Secondlife for about the last 7 months, and recently left the metaverse to pursue a podcast format of my show(s).  What I found was I really missed the live interaction with people during the recording of the set. It was great to get feedback, audience participation, and I could really gauge the flow of energy that I'm broadcasting. To some this may sound strange, but when your primary interaction is over text, and you see a feed erupt with actions as you put on more high energy music, it just 'clicks' and makes sense. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Sep/secondlife_dj.png" /&gt;&lt;/p&gt;
&lt;p&gt;The second aspect to this was I wanted to showcase how you can get moving with &lt;strong&gt;Juju in less than a week&lt;/strong&gt; to bring a &lt;strong&gt;production ready&lt;/strong&gt; app online and &lt;strong&gt;ready for scale&lt;/strong&gt; (depending on the complexity of the app of course). It's been a short while since I've pushed a charm from scratch into the charm store - and this will definately get me re-acquiainted with the process our new users go through on their Juju journey.&lt;/p&gt;
&lt;p&gt;So, I've got a habit of mixing my passions in life. If you know me very well you know that I am deeply passionate about what I'm working on, my hobbies, and the people that I surround myself with that i consider my support network. How can I leverage this to showcase and run a 'Juju lab' study?&lt;/p&gt;
&lt;h3&gt;The Shoutcast charm is born&lt;/h3&gt;
&lt;p&gt;I spent a sleepless night hacking away at a &lt;a href="https://code.launchpad.net/~lazypower/charms/trusty/shoutcast/trunk"&gt;charm&lt;/a&gt; for a &lt;a href="http://www.shoutcast.com/BroadcastNow"&gt;SHOUTCast DNAS server&lt;/a&gt;. They offer several PAAS, scaling solutions that might work for people that are making money off of their hobby - but I myself prefer to remain an enthusiast and not turn a profit from my hobby. &lt;a href="http://juju.ubuntu.com"&gt;Juju&lt;/a&gt; is a perfect fit for deploying pretty much anything, and making sure that all the components work together in a distributed service environment. It's getting better every day - proof of this is the &lt;a href="http://jujucharms.com"&gt;Juju GUI&lt;/a&gt; just announced &lt;a href="https://insights.ubuntu.com/2014/09/26/juju-machine-view-more-control-at-your-fingertips/"&gt;machine view&lt;/a&gt; - where you can easily do co-location of services on the same server, and get a deep dive look at how your deployment is comprised of machines vs services.&lt;/p&gt;
&lt;h3&gt;Observations &amp;amp; Lessons&lt;/h3&gt;
&lt;h4&gt;Testing what you expect, never yields the unexpected&lt;/h4&gt;
&lt;p&gt;Some definate changes to just the &lt;code&gt;shoutcast charm&lt;/code&gt; itself are in order. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the default stream MIME from AAC to MP3 so its cross compat on &lt;em&gt;every&lt;/em&gt; os without installing quicktime.&lt;/li&gt;
&lt;li&gt;Test EVERY os before you jam out to production - which may seem like a rookie mistake. I tested on Mac OSX and Ubuntu Linux (default configuration for 14.04) and everything was in order. Windows users however, that are not savvy with tech that stems from back in the 90's were left out in the cold and prompted to install Quicktime when they connected.  This is &lt;em&gt;not&lt;/em&gt; ideal. &lt;/li&gt;
&lt;li&gt;the 'automatic' failover that I touted in the readme is dependent on the client consuming the playlist. If the client doesn't support multiple streams in the playlist, its not really automatic forwarding load balancing, but polling failure cases with resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Machine Metrics tell most of the story&lt;/h4&gt;
&lt;p&gt;I deployed this setup on Digital Ocean to run my 'lab test' - as the machines are cheap, performant, and you get 1TB of transfer unmetered before you have to jump up a pricing teir. This is a great mixture for testing the setup. But how well did the VPS perform?&lt;/p&gt;
&lt;p&gt;I consumed 2 of the 'tiny' VPS servers for this. And the metrics of the transcoders were light enough that it barely touched the CPU. As a matter of fact I saw more activity out of supporting infra services such as LogStash, than I did out of the SHOUTCast charm. Excellent work on the implementation Shoutcast devs. This was a pleasant surprise!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Sep/ubuntu-do-prod-41c692c182e243318ebec209c576aff7---_116.png" /&gt;
&lt;img alt="" src="/content/images/2014/Sep/ubuntu-do-prod-22998e4b90d24ca682ce3892368139b1---_117.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Pre-scaling was the winner&lt;/h4&gt;
&lt;p&gt;Having a relay setup out of the gate really helped to mitigate issues as I saw people get temporary hiccups in their network. I saw several go from the primary stream to the relay and finish out the duration of the broadcast connected there.&lt;/p&gt;
&lt;p&gt;The fact that the clients supported this, tells me that any time I do this live, I need to have at bare minimum 2 hosts online transmitting the broadcast.&lt;/p&gt;
&lt;p&gt;Had this been a single host - every blip in the network would yield dead airspace before they realized something had gone wrong.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Juju Scaled Shoutcast Service" src="/content/images/2014/Sep/Juju-Admin---Google-Chrome_127.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Supportive people are amazing, and make what you do, worthwhile&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/events/c00j89u3ipec61gmrlq11916fg8"&gt;Those that tuned in&lt;/a&gt; genuinely enjoyed that I had the foresight to pre-record segments of the show to interact with them. This was more so I could investigate the server(s), watch htop metrics, refresh shoutcast, etc. However the fan interaction was genuinely empowering. I found myself wanting to turn around and see what was said next during the live-mixing segments.&lt;/p&gt;
&lt;h3&gt;The Future for Radio Bundle Development&lt;/h3&gt;
&lt;h4&gt;Putting the auto in automation&lt;/h4&gt;
&lt;p&gt;I've found a GREAT service that I want to consume and deploy to handle the station automation side of this deployment. &lt;a href="http://sourcefabric.org"&gt;SourceFabric&lt;/a&gt; produces &lt;a href="http://sourcefabric.org/airtime"&gt;Airtime&lt;/a&gt; which makes setting up Radio Automation very simple, and supports such advanced configurations as mixing in Live DJ's into your lineup on a schedule. How awesome is this? It's open-source to boot!&lt;/p&gt;
&lt;p&gt;I'm also well on my way to having revision 1 of this bundle completed, since I started the blog post on Friday. Hacked on the bundle through the weekend, and landed here on Monday.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Sep/Workspace-1_126.png" /&gt;&lt;/p&gt;
&lt;p&gt;I'll be talking more about this after it's officially unveiled in Brussels. &lt;/p&gt;
&lt;h2&gt;Where to find the 'goods'&lt;/h2&gt;
&lt;p&gt;The Shoutcast Juju Charm can be found on Launchpad: &lt;a href="https://code.launchpad.net/~lazypower/charms/trusty/shoutcast/trunk"&gt;lp:~lazypower/charms/trusty/shoutcast/trunk&lt;/a&gt; or &lt;a href="https://github.com/chuckbutler/shoutcast-charm"&gt; github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The up-coming Airtime Radio Automation Charm can be found &lt;a href="https://github.com/chuckbutler/airtime-charm"&gt;on github&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Actual metrics and charts to be uploaded at a later date, once I've sussed out how I want to parse these and present them. &lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="juju"></category><category term="planet"></category><category term="radio"></category><category term="music"></category><category term="automation"></category><category term="experiment"></category></entry><entry><title>Juju + Digital Ocean = Awesome!</title><link href="http://blog.dasroot.net/juju-digital-ocean-awesome.html" rel="alternate"></link><updated>2014-09-21T23:09:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-09-21:juju-digital-ocean-awesome.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/1igZWnCi8Ac" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Syndicators, there is a video above that may not have made it into syndication. Visit the source link to view the video.&lt;/p&gt;
&lt;p&gt;Additional note - this is now part of the &lt;a href="https://juju.ubuntu.com/docs/config-digitalocean.html"&gt;official juju documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Juju on Digital Ocean, WOW! That's all I have to say. Digital Ocean is one of the fastest cloud hosts around with their SSD backed virtual machines. To top it off their billing is a no-nonsense straight forward model. $5/mo for their lowest end server, with 1TB of included traffic. That's enough to scratch just about any itch you might have with the cloud.&lt;/p&gt;
&lt;p&gt;Speaking of scratching itches, if you haven't checked out Juju yet, now you have a &lt;strong&gt;prime, low cost cloud provider&lt;/strong&gt; to toe the waters. Spinning up droplets with Juju is very straight forward, and offers you a hands on approach to service orchestration thats affordable enough for a weekend hacker to whet their appetite. Not to mention, Juju is currently the #1 project on their API Integration listing!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Juju #1 in API Integration for Digital Ocean!" src="/content/images/2014/Sep/Selection_103.png" /&gt;&lt;/p&gt;
&lt;p&gt;In about 11 minutes, we will go from zero to deployed infrastructure for a scale-out blog (much like the one you're reading right now). &lt;/p&gt;
&lt;h4&gt;Links in Video:&lt;/h4&gt;
&lt;p&gt;Juju Docean Github - http://github.com/kapilt/juju-digital...
Juju Documentation -http://juju.ubuntu.com/docs
Juju CharmStore - http://jujucharms.com
Kapil Thangavelu - http://blog.kapilt.com/
The Juju Community Members on DO - http://goo.gl/m6u781&lt;/p&gt;
&lt;h3&gt;Text Instructions Below:&lt;/h3&gt;
&lt;p&gt;Pre-Requisits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Recent Ubuntu Installation (12.04 +)&lt;/li&gt;
&lt;li&gt;A CreditCard (for DO)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Install Juju&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stable&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Install Juju-Docean Plugin&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docean&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Generate an SSH Key&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt;   
 &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Setup DO API Credentials in Environment&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll want the following exports in $HOME/.bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DO_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XXXXXX&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DO_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XXXXXX&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then source the file so its in our current, active session.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Setup Environment and Bootstrap&lt;/h5&gt;
&lt;p&gt;vim ~/.juju/environments.yaml &lt;/p&gt;
&lt;p&gt;Place the following lines in the environments.yaml, under the &lt;code&gt;environments:&lt;/code&gt; key (indented 4 spaces) - ENSURE you use 4 spaces per indentation block, NOT a TAB key. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="nl"&gt;digitalocean:&lt;/span&gt;
      &lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;manual&lt;/span&gt;
      &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;
      &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Switch to the DigitalOcean environment, and bootstrap&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;digitalocean&lt;/span&gt;
 &lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;docean&lt;/span&gt; &lt;span class="n"&gt;bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you're free to add machines with constraints.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;docean&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mem=2g region=nyc3&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;precise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And deploy our infrastructure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;haproxy&lt;/span&gt;

&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt; &lt;span class="n"&gt;ghost&lt;/span&gt; &lt;span class="n"&gt;haproxy&lt;/span&gt;

&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;expose&lt;/span&gt; &lt;span class="n"&gt;haproxy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From here, pull the status off the HAProxy node, copy/paste the public-address into your browser and revel in your brand new Ghost blog deployed on Digital Ocean's blazing fast SSD servers.&lt;/p&gt;
&lt;h3&gt;Caveats to Juju DigitalOcean as of Sept. 2014:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;These are important things to keep in mind as you move forward. This is a beta project. Evaluate the following passages for quick fixes to known issues, and warnings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not all charms have been tested on DO, and you may find missing libraries. Most notably python-yaml on charms that require it. Most "install failed" charms is due to missing python-yaml.&lt;/p&gt;
&lt;p&gt;A quick hotseat fix is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
&lt;span class="n"&gt;exit&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;resolved&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then file a bug against the culprit charm that it's missing a dependency for Digital Ocean.&lt;/p&gt;
&lt;p&gt;While this setup is amazingly cheap, and works really well, the Docean plugin provider should be considered beta software, as &lt;a href="http://blog.kapilt.com"&gt;Hazmat&lt;/a&gt; is still actively working on it.&lt;/p&gt;
&lt;p&gt;All in all, this is a great place to get started if you're willing to invest a bit of time working with a manual environment. Juju's capable orchestration will certainly make most if not all of your deployments painless, and bring you to scaling nirvana.&lt;/p&gt;
&lt;p&gt;Happy Orchestrating!&lt;/p&gt;</summary><category term="juju"></category><category term="digitalocean"></category><category term="planet"></category></entry><entry><title>Adopt a Charm pt 2</title><link href="http://blog.dasroot.net/adopt-a-charm-pt-2.html" rel="alternate"></link><updated>2014-09-15T00:09:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-09-15:adopt-a-charm-pt-2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;In &lt;a href="/adopt-a-charm"&gt;Part 1&lt;/a&gt; of the Adopt a Charm series we covered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Picking a charm&lt;/li&gt;
&lt;li&gt;Ensuring we are the sole maintainer&lt;/li&gt;
&lt;li&gt;Triaging the issue listing&lt;/li&gt;
&lt;li&gt;Applying very minimal cosmetic cleanup of an 'abandoned' project&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we're ready to take a look at the next steps of the process. Namely how we can bring the charm up in terms of relevance, and ensuring we are providing a great user experience with Juju.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>Juju &lt;3's Big Data</title><link href="http://blog.dasroot.net/juju-3s-big-data.html" rel="alternate"></link><updated>2014-08-27T17:08:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-08-27:juju-3s-big-data.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;iframe width="640" height="360" src="//www.youtube.com/embed/f9yTWK7Z9Wg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Syndicators, there is a video link above that may not make syndication. Click the source link to view the 10 minute demo video.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Over the past 4 months &lt;a href="http://bigdatachat.net"&gt;Amir Sanjar&lt;/a&gt; and I have been working dilligently on Juju's Big Data story. Working with software vendors to charm up big name products like the Demo'd Hortonworks Hadoop distribution.&lt;/p&gt;
&lt;p&gt;To those of you that know nothing about Hadoop - Hadoop is a large scale big data framework / suite of applications. It provides facilities to build an entire ecosystem to crunch numbers from seemingly unrelated data sources, and compute through petabytes of data via Map/Reduce applications.&lt;/p&gt;
&lt;p&gt;A traditional hadoop deployment consists of a few components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Map / Reduce Engine (or cluster of engines)&lt;/li&gt;
&lt;li&gt;Data Warehousing Facility&lt;/li&gt;
&lt;li&gt;Distributed Filesystem to cache results across the cluster&lt;/li&gt;
&lt;li&gt;Data sources (MySQL, MongoDB, HBASE, Couch, PostGRES just to name a few)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Setting up these different services and interconnecting them can be a full day process for a seasoned professional in the Big Data ecosystem. Juju offers you a quick way to distill all of that setup and interconnectivity knowledge so you can be a master at USING hadoop. Not at deploying it.&lt;/p&gt;
&lt;p&gt;Some people say Juju negates the need to read the book, and while this may be true; I still advise you read the book at least once - so you know how it's put together, why certain configurations were chosen, and how to troubleshoot the bundle should anything go wrong. Then you're free to wield the community provided Hadoop bundle(s) like a pro.&lt;/p&gt;
&lt;p&gt;Enjoy the Demo, and look for more Big Data tools and products on the &lt;a href="http://jujucharms.com"&gt;Juju Charm Store&lt;/a&gt;&lt;/p&gt;</summary><category term="juju"></category><category term="planet"></category><category term="big-data"></category><category term="hadoop"></category><category term="hortonworks"></category></entry><entry><title>The power of community charming</title><link href="http://blog.dasroot.net/the-power-of-community-charming.html" rel="alternate"></link><updated>2014-08-14T12:08:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-08-14:the-power-of-community-charming.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;The Juju Charm Store has been in a bit of a spotlight lately, as it's both a wonderful tool and a source of some frustration for new charmers getting involved in the Juju ecosystem. We wanted to take this opportunity to cover some of the finer aspects of the Juju Charm Store for new users and explain the difference between what a &lt;strong&gt;recommended&lt;/strong&gt; charm is vs a charm that lives in a &lt;strong&gt;personal namespace&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Why is there a distinction?&lt;/h3&gt;
&lt;p&gt;Quality.  We want all the charms in the Charm Store to be of the highest quality so that users can depend on the charms deploying properly and do what they say they are going to do.&lt;/p&gt;
&lt;p&gt;When the Charm Store first came into existance, it was the wild west. Everyone wanted their charm in the Charm Store and things were being promoted very rapidly into the store. There were minimal requirements, and everything was &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;exciting&lt;/strong&gt;. Now that Juju has grown into its toddler phase and is starting to walk around on it's own - we've evolved more regulations on charms. We have defined what makes a high-quality charm, and what expectations a user should have from a high quality charm. You can read more about this at the &lt;a href="https://juju.ubuntu.com/docs/authors-charm-policy.html"&gt;Charm Store Policy doc&lt;/a&gt; and the &lt;a href="https://juju.ubuntu.com/docs/authors-charm-quality.html"&gt;Feature Rating doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The bar for some of the features, and quality descriptors may seem like extremly high hurdles for your service to meet to become a ~charmer recommended service. This is why Personal Namespaces exist - as the charmer team continues to add and expand the Charm Store with charms that meet and/or exceed these quality guidelines - we &lt;strong&gt;encourage everyone&lt;/strong&gt; to submit their Juju charm for world wide consumption. You may disagree with FOSS licensing, or perhaps data-handling just isn't something you're willing to do with the service that you orchestrate. These are OK! We still want your service to be orchestrate-able with Juju. Just push your charm into a Personal Namespace, and you don't even have to undergo a charm review from the Charmers team unless &lt;em&gt;you really want&lt;/em&gt; someone proofing your code, and service behavior.&lt;/p&gt;
&lt;h3&gt;What differences will this have?&lt;/h3&gt;
&lt;h4&gt;Deployment&lt;/h4&gt;
&lt;p&gt;We've all seen the typical CLI commands for deploying charmer recommended charms.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;juju deploy cs:trusty/mysql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;There will be a descriptor changed for your personal namespace&lt;/p&gt;
&lt;p&gt;&lt;code&gt;juju deploy cs:~lazypower/trusty/logstash&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Charm Store Display&lt;/h4&gt;
&lt;p&gt;Personal namespace charms will display the charm category icon instead of a provided service icon. This is a leftover decision in the Charm Store that is subject to change, but at present writing - is the current status of visual representation.&lt;/p&gt;
&lt;h4&gt;Submission Process&lt;/h4&gt;
&lt;p&gt;To have your charm listed as a charmer team recommended charm, you have to under-go a rigorous review process where we evaluate the charm, evaluate tests for your charm, and deploy &amp;amp; run tests against the provided service with different configuration patterns, and even introduce some chaos monkey breakage to see how well the charm stands on its own 2 feet during less than ideal conditions.&lt;/p&gt;
&lt;p&gt;This involves pushing to a launchpad branch, and opening a bug ticket assigned to ~charmers, and following the cycle - which at present can take a week or longer to complete from first contact, depending on Charmer resources, time, etc.&lt;/p&gt;
&lt;h3&gt;I don't want to wait&lt;/h3&gt;
&lt;h4&gt;my service is awesome and does what I want it to do. Why am I waiting?&lt;/h4&gt;
&lt;p&gt;You dont have to! The pattern for pushing a charm into your personal namespace requires zero review, and is ready for you to complete today. The longest you will wait is ~ 30 minutes for the Charm Store to ingest the metadata about your charm.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bzr push lp:~lazypower/charms/trusty/awesome-o/trunk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Thats all that's required for you to publish a charm under your namespace for the Charm Store. To further break that down:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lp:~lazypower&lt;/strong&gt; : This is your launchpad username&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/charms/&lt;/strong&gt; : in this case, charms is the project descriptor&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/trusty/&lt;/strong&gt; : We target all charms against a series&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/awesome-o/&lt;/strong&gt; : This is the name of your service&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/trunk/&lt;/strong&gt; : Only the /trunk branch will be ingested. So if you want to do development work in /fixing_lp1234  - you can certainly do that. When work is completed, simply merge back into /trunk! It will be available immediately in your charm listed in the Juju Charm Store.&lt;/p&gt;
&lt;h3&gt;Charm Store: Personal Namespace (other)&lt;/h3&gt;
&lt;p&gt;In the Juju Charm Store as it exists today, there is a dividing bar below the recommended charms for 'other' - and this warehouses bundles, personal charms, and is a place holder for future data types as they emerge.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Aug/Selection_069.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see by the image above, there is quite a bit of information packed into the accordion. Let's take a look at the bundle description first:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Aug/bundle-diagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;As illustrated, no review process was done to submit this bundle, it has 0 deployments in the wild of 5 services/units.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Aug/namespace_charm.png" /&gt;&lt;/p&gt;
&lt;p&gt;Looking at a charm, we have the same basic level of information, and we see that the  charm itself is in my personal namespace.  trusty|lazypower - designates the series/namespace of the charm listing. &lt;/p&gt;
&lt;h3&gt;Charm Store: Recommended Charms&lt;/h3&gt;
&lt;p&gt;Recommended charms have undergone a rigerous testing phase by the Juju Charmer team, include tested hooks, and tested deployment strategies using the &lt;a href="https://juju.ubuntu.com/docs/tools-amulet.html"&gt;Amulet testing framework&lt;/a&gt;. You can read more about this at the &lt;a href="https://juju.ubuntu.com/docs/authors-charm-policy.html"&gt;Charm Store Policy doc&lt;/a&gt; and the &lt;a href="https://juju.ubuntu.com/docs/authors-charm-quality.html"&gt;Feature Rating doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They have full service descriptor icons provided by the charm itself, and are deployable via juju deploy cs:series/service&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Aug/Selection_070.png" /&gt;&lt;/p&gt;
&lt;p&gt;Notice the orange earmark in the upper right corner. This denotes the charm is a ~charmer recommended service, as it has undergone the review process and accepted into the charmer's namespace of the Juju Charm Store.&lt;/p&gt;
&lt;h3&gt;Which is right for me?&lt;/h3&gt;
&lt;p&gt;When deciding how to get started working with Juju and what level you should start at for your charm - I can't stress enough. &lt;strong&gt;Get started with your personal namespace&lt;/strong&gt;. When you feel your charm is ready (and this can take a while during R&amp;amp;D) Then submit your charm for official ~charmer review. &lt;/p&gt;
&lt;p&gt;The process of getting started with personal namespaces is cheap, easy, and &lt;strong&gt;open to everyone&lt;/strong&gt;. It's still very much the wild west. Your charm will be in the hands of users 10x faster using personal namespaces, you still have the opportunity to have it reviewed by submitting a bug to the &lt;a href="http://manage.jujucharms.com/tools/review-queue"&gt;Review Queue&lt;/a&gt;, and you become the orchestrating master of your charmed service.&lt;/p&gt;
&lt;p&gt;If you're an Independent Software Vendor and would like to start with your charm In the ~charmers recommended list, feel free to submit a review proposal, however - you are now agreeing to be subject to the Charm Store review policy, your charm must meet all the criteria of a good charm, and the review process can take some length of time depending on the complexity of your service.&lt;/p&gt;
&lt;h3&gt;What is the future of charm publishing?&lt;/h3&gt;
&lt;p&gt;The Juju Ecosystem team has spent many hours discussing the current state of charm publishing and how to make this easier for our users. On the horizon (but with no foreseeable dates to be published) there are some new tools emerging to assist in this process.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;juju publish&lt;/code&gt; is a command that will get you started right away by creating your personal namespace, and pushing your charm (and/or revisions) to your branch with the appropriate bugs/MP's assigned.&lt;/p&gt;
&lt;p&gt;A new Review Queue is being implemented by &lt;a href="http://marcoceppi.com"&gt;Marco Ceppi&lt;/a&gt; that will aid us in first contact, getting 'hot' review items out the door quickly, and triaging long running reviews appropriately. &lt;/p&gt;
&lt;h3&gt;Where do I go for help?&lt;/h3&gt;
&lt;p&gt;Should you have any problems getting moving with publishing your charm, you can always contact the &lt;a href="mailto:juju@lists.ubuntu.com"&gt;mailing list&lt;/a&gt;, join us in #juju on irc.freenode.net, or open a question on &lt;a href="http://askubuntu.com"&gt;Ask Ubuntu&lt;/a&gt; tagged #juju&lt;/p&gt;</summary><category term="juju"></category><category term="charming"></category><category term="charm-maintainership"></category><category term="charms"></category><category term="charm-store"></category><category term="planet"></category></entry><entry><title>Juju Charm Infographic</title><link href="http://blog.dasroot.net/juju-charm-infographic.html" rel="alternate"></link><updated>2014-06-15T13:06:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-06-15:juju-charm-infographic.html</id><summary type="html">&lt;hr /&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;I am not a graphic designer. I built this quick infographic to help new users quickly grokk what a Juju Charm's components are, and why it's compelling to them.&lt;/p&gt;
&lt;p&gt;&lt;img alt="What's a Juju Charm Infographic" src="/content/images/2014/Jun/Whats-a-juju-charm-1.png" /&gt;&lt;/p&gt;</summary><category term="juju"></category><category term="charming"></category><category term="ubuntu"></category></entry><entry><title>Juju DNS As A Service</title><link href="http://blog.dasroot.net/dns-as-a-service-lessons-learned.html" rel="alternate"></link><updated>2014-06-07T03:06:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-06-07:dns-as-a-service-lessons-learned.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;I had the opportunity to plan and hack on a charm over the last few weeks that provided DNS as a service to supporting charms. (which subsequently has come between myself and the revamping of the &lt;a href="/adopt-a-charm/"&gt;RAILS charm&lt;/a&gt;) This was a great opportunity to flex and test some of the boundaries within the Juju ecosystem to provide a solution out of the box.&lt;/p&gt;
&lt;h4&gt;Planning&lt;/h4&gt;
&lt;p&gt;This is the first charm I've followed a traditional planning phase of aggregating requirements and putting together a spec document. Which I found extremely helpful when it came time to implement the functionality of the charm. Normally I would spin up a fresh charm template, enter debug-hooks and just hack away at getting some MVP together to express what I feel it should provide. What I've found by doing a planning session first is I'm not a domain expert of any sense when it comes to DNS. I have a very vanilla experience with them by using the most common DNS entries: &lt;strong&gt;A, CNAME, TXT&lt;/strong&gt;. &lt;/p&gt;
&lt;h5&gt;Gathering Reviewers (stakeholders)&lt;/h5&gt;
&lt;p&gt;I started by defining Stakeholders of the application suite. Meaning: Who's going to be using this, and why do they want to use it?&lt;/p&gt;
&lt;p&gt;While my use case is very vanilla, not everybody will have this clear cut definition of how to use DNS. I encountered a great resource along my journey of planning - Matt Williams from Metaswitch. They use DNS to accomplish building a fault tolerant load balancer by stressing the limitations of a DNS Configuration using &lt;strong&gt;SRV&lt;/strong&gt; and &lt;strong&gt;NAPTR&lt;/strong&gt; records. Which is a great use case I had not even considered!&lt;/p&gt;
&lt;p&gt;Among the engineers, I was also tasked with providing a solution that would appeal to CTO's - who may or may not be engineering experts, but understand the overarching goals of a network topology. This yields a certain 'ease of use' aspect - that it must be flexible in design to apply to an engineer, yet be simple enough for a business user to consume.&lt;/p&gt;
&lt;h5&gt;What should it do?&lt;/h5&gt;
&lt;p&gt;When defining what the charm itself should do, I found it useful to write user stories to define this kind of behavior. This not in turn gives me a definitive goal, but also helps shape any kind of planning when looking at the engineering aspect of the charm.&lt;/p&gt;
&lt;p&gt;Below is a snippet of the user stories compiled that can be found in &lt;a href="https://github.com/chuckbutler/DNS-Charm/blob/master/docs/spec-document.pdf"&gt;doc/spec-document.pdf&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;CTO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;theoretical&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;capability&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;DNS&lt;/span&gt; &lt;span class="n"&gt;management&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;solutions&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;weeks&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;creating&lt;/span&gt; &lt;span class="n"&gt;simple&lt;/span&gt; &lt;span class="n"&gt;Juju&lt;/span&gt; &lt;span class="n"&gt;relations&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;charms&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;domains&lt;/span&gt; &lt;span class="n"&gt;assigned&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;complex&lt;/span&gt; &lt;span class="n"&gt;charms&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;automated&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;similar&lt;/span&gt; &lt;span class="n"&gt;fashion&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;Route53&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;any&lt;/span&gt; &lt;span class="n"&gt;cloud&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;AWS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Deployment&lt;/span&gt; &lt;span class="n"&gt;Engineer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Matt&lt;/span&gt; &lt;span class="n"&gt;Williams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sean&lt;/span&gt; &lt;span class="n"&gt;Feole&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;MANAGE&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;RECORDS&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;CNAMES&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;CHARM&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;MY&lt;/span&gt; &lt;span class="n"&gt;POINTS&lt;/span&gt; &lt;span class="n"&gt;OF&lt;/span&gt; &lt;span class="n"&gt;ENTRY&lt;/span&gt; &lt;span class="n"&gt;HAVE&lt;/span&gt; &lt;span class="n"&gt;DOMAIN&lt;/span&gt; &lt;span class="n"&gt;NAMES&lt;/span&gt; &lt;span class="n"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;EACH&lt;/span&gt; &lt;span class="n"&gt;UNIT&lt;/span&gt; &lt;span class="n"&gt;OF&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;SCALED&lt;/span&gt; &lt;span class="n"&gt;CLUSTER&lt;/span&gt; &lt;span class="n"&gt;HAS&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;NODE&lt;/span&gt; &lt;span class="n"&gt;DNS&lt;/span&gt; &lt;span class="n"&gt;ENTRY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;CHARM&lt;/span&gt; &lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Marco&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Chuck&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Maarten&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;PROGRAMMABLE&lt;/span&gt; &lt;span class="n"&gt;DNS&lt;/span&gt; &lt;span class="n"&gt;WRAPPER&lt;/span&gt; &lt;span class="n"&gt;WITH&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;CONSISTENT&lt;/span&gt; &lt;span class="n"&gt;INTERFACE&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;CAN&lt;/span&gt; &lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;ANY&lt;/span&gt; &lt;span class="n"&gt;SERVICE&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;HAVE&lt;/span&gt; &lt;span class="n"&gt;PURCHASED&lt;/span&gt; &lt;span class="n"&gt;DOMAIN&lt;/span&gt; &lt;span class="n"&gt;NAMES&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;As&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;Deployment&lt;/span&gt; &lt;span class="n"&gt;Engineer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Matt&lt;/span&gt; &lt;span class="n"&gt;Wiliams&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Sean&lt;/span&gt; &lt;span class="n"&gt;Feole&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ability&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt; &lt;span class="n"&gt;DNS&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;Offline&lt;/span&gt; &lt;span class="n"&gt;Environment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;forced&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;remember&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;addresses&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This simple suite of user stories is very telling in the following regards:&lt;/p&gt;
&lt;h5&gt;Established Goals&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity is key. Distill away common blockers such as API Keys, API Routines, and manual intervention&lt;/li&gt;
&lt;li&gt;Make it extensible so it works on N providers, not just 1 or 2. &lt;/li&gt;
&lt;li&gt;Make contributing additional providers simple through documentation, and a clearly defined method to achieving the goal - relation based DNS&lt;/li&gt;
&lt;li&gt;Have the services define their DNS, and the provider be the gateway. I don't know how end users will be consuming the service, so give them the ability to define this subset of records.&lt;/li&gt;
&lt;li&gt;Make it programmatic, or automatic depending on the relationship.&lt;/li&gt;
&lt;li&gt;Have it work in isolated labs by providing the full suite service, and not dependent on a third party&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these goals in mind, we are ready to move into implementation specifics.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>5 Tips for 'Pure Python' Juju Charms</title><link href="http://blog.dasroot.net/charming-tips-for-pure-python.html" rel="alternate"></link><updated>2014-05-23T02:05:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-05-23:charming-tips-for-pure-python.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/May/charming_in_pure_python.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to Tim for use of his comic above&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I'm prototyping charms, I tend to reach for the quickest tool to accomplish the task. Which is Bash. Unfortunately - Bash charms get unwiedly quick and are typically full of hacks to complete a given task where a touring complete programming language would lend itself really well. 'Why not use Chef, or Ansible, or one of the other framework's you've already blogged about?" you say. Simple, because &lt;strong&gt;Juju gives you options&lt;/strong&gt;. And I'd like to present most of those to anyone looking to get started. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, sorry about the theme bug. If you don't see the Gists below, just refresh and they will show up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Tip 1: Use Charm Helpers&lt;/h3&gt;
&lt;p&gt;Charm Helpers is a community contributed and maintained library to assist in writing charms rapidly. All community contributions are gated through Code Review and show up in the Juju Review Queue like any other charm merge proposal.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/May/charm_helpers_mp.png" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To get started quickly using Charm Helpers, skip to Tip 3 and use make sync-charmhelpers in tandem with a charm-helpers.yaml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;helpers&lt;/span&gt;
&lt;span class="n"&gt;destination&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;charmhelpers&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Charm Helpers exposes common tasks such as:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Installing apt packages&lt;/li&gt;
&lt;li&gt;Determining the networking devices on the machine&lt;/li&gt;
&lt;li&gt;Using hook context within your python code&lt;/li&gt;
&lt;li&gt;Fetching configuration variables from the juju environment&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Example Snippet of a Charm Helpers enabled source file&lt;/h4&gt;
&lt;script src="https://gist.github.com/chuckbutler/9ad5d92250f05481e008.js"&gt;&lt;/script&gt;

&lt;h3&gt;Tip 2: Unit Test Your Hook Code&lt;/h3&gt;
&lt;p&gt;Unit testing is a fundamental dicipline to ensure your code is doing what you expect it to do. There's a huge movement within the charming community to start testing charms, and lowering charm ratings for those contributions without tests. Simply stated, if we can verify your charm behaves in CI, you get bonus points for the effort and ease of management for the charmers.&lt;/p&gt;
&lt;p&gt;You can accomplish this with typical python-unittest and python-mock libraries.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're new to testing, I would start with the &lt;a href="https://docs.python.org/2/library/unittest.html"&gt;unittest docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;An example test of the common code above:&lt;/h4&gt;
&lt;script src="https://gist.github.com/chuckbutler/40bd33844f9a614b2d05.js"&gt;&lt;/script&gt;

&lt;h3&gt;Tip 3: Use A Makefile&lt;/h3&gt;
&lt;p&gt;Makefiles are excellent for 'gluing together' a project's components and creating 'build recipes' for different tasks. I've compiled a few Makefile lines that I find myself reusing over and over.&lt;/p&gt;
&lt;script src="https://gist.github.com/chuckbutler/04daa904e603215ff9e9.js"&gt;&lt;/script&gt;

&lt;h3&gt;Tip 4: Write Amulet Tests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://github.com/marcoceppi/amulet"&gt;github.com/marcoceppi/amulet&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Chances are your service isn't stand-alone and integrates with other services. Such as Wordpress has a dependency on MySQL. Amulet gives charm authors a way to test their deployment topology by validating data sent over the wire, and probing deployed systems. The Amulet README does a better job of explaining it, so I'll kindly point you in that direction.&lt;/p&gt;
&lt;h3&gt;Tip 5: Resist All Temptation To Symlink Every Hook Against A Single .py File&lt;/h3&gt;
&lt;p&gt;Windows support is coming. If you want to avoid the headache (and by proxy save us headaches) during this porting effort as it emerges, &lt;strong&gt;do not symlink every hook against a single .py file&lt;/strong&gt;. Windows does not support symlinks. This is not portable.&lt;/p&gt;
&lt;p&gt;And as a minor point to the above, it's good practice to write OS independent code. (for example, when defining paths, use os.path.join() instead of hard-coding '/var/log/example.log') This will go miles in saved headache when tracking down issues during the porting process.&lt;/p&gt;
&lt;h4&gt;With these five ninja tips in mind you'll be hacking up a storm on your shiney new Python based Juju Charm in no time!&lt;/h4&gt;</summary><category term="juju"></category><category term="charming"></category><category term="python"></category><category term="ubuntu"></category></entry><entry><title>Adopt a Charm</title><link href="http://blog.dasroot.net/adopt-a-charm.html" rel="alternate"></link><updated>2014-05-09T17:05:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-05-09:adopt-a-charm.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;As a Juju Charmer, I really care about the Juju Ecosystem. I want all of our building blocks, or amino acids in your deployment DNA to be solid pieces for everyone to use, benefitting from the shared knowledge of the global community.  This post is an abstract about community building, and how my experience went looking to contribute to the juju ecosystem as a whole.&lt;/p&gt;
&lt;p&gt;You've been poking around in the juju ecosystem for a while. You've found your pain points or 'papercuts' as we call them. You've opened bugs and received minimal feedback on them because the author has moved on. What do you do? &lt;/p&gt;
&lt;h2&gt;Adopt a charm!&lt;/h2&gt;
&lt;p&gt;This is &lt;em&gt;literally&lt;/em&gt; nothing new. The juju ecosystem was built around this concept, which is very prevalent in other Open Source Software projects. We have a &lt;strong&gt;mandatory open source licensing model&lt;/strong&gt; on the charm code itself to be accepted into the Juju charm store specifically for this reason. Imagine if your charm code was proprietary, and licensed with some angry "do not modify" license, and it broke on you a year after deployment because the maintainer won the lottery and moved to an island.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Devops Borat on the beach" src="http://static.guim.co.uk/sys-images/Film/Pix/pictures/2008/07/02/borat460.jpg" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Devops Borat has won the lottery, very nice!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, I've encountered something similar. a community template had a typo in the README and I opened a merge request against the maintainers branch... the maintainer had moved on and was no longer maintaining the code. Which you can see &lt;a href="https://github.com/Altoros/juju-charm-chef/pulls"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;I want to contribute - it's my turn to drive.&lt;/h4&gt;
&lt;p&gt;The first step is to e-mail the &lt;a href="https://lists.ubuntu.com/mailman/listinfo/juju"&gt;juju list&lt;/a&gt;, to ensure someone else hasn't stepped into the position without announcement, or give the maintainer a chance to toss their hat back into the ring. That and it's just good manners. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/May/email_the_juju_list.png" /&gt;&lt;/p&gt;
&lt;h5&gt;Success, it's my time to shine&lt;/h5&gt;
&lt;p&gt;My first task is to poke around in the &lt;a href="https://bugs.launchpad.net/charms/+source/rails"&gt;rails-charm bug tracker&lt;/a&gt; where I discovered there were several action items left that had not been resolved.&lt;/p&gt;
&lt;h3&gt;Before&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/May/rails_issues_before-1.png" /&gt;&lt;/p&gt;
&lt;h3&gt;After&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/May/rails_issues_after.png" /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the simple presence of &lt;a href="https://wiki.ubuntu.com/Bugs/Bug%20triage"&gt;bug maintenance&lt;/a&gt; will go a long way towards helping a projects apperance. But this is only a cosmetic fix a this point.&lt;/p&gt;
&lt;p&gt;This is step 1, and I will continue to document and publish about my experience. &lt;/p&gt;</summary><category term="charm-maintainership"></category><category term="ubuntu"></category></entry><entry><title>Replacing U1 with OwnCloud on Digital Ocean</title><link href="http://blog.dasroot.net/replacing-u1-with-owncloud-on-digital-ocean.html" rel="alternate"></link><updated>2014-04-22T19:04:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-04-22:replacing-u1-with-owncloud-on-digital-ocean.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Juju is an enterprise grade system orchestration tool. But, that doesn't mean its only place is in some big fortune 500 company. Juju helps me in my day to day orchestration of the webapps that power my home, and pet projects. I've come to rely on using Juju to orchestrate all of my deployments whether personal or commercial.&lt;/p&gt;
&lt;p&gt;So, with that being said - when Canonical announced they would be closing down the Ubuntu 1 file store, I started looking for a replacement. This was a perfect opportunity for OwnCloud to step in and take up some of that slack. Their official announcement was right on the heels of the closing post of U1, and this was enough to grab my attention.&lt;/p&gt;
&lt;p&gt;Several late nights were put into helping &lt;a href="http://joseeantonior.wordpress.com/2014/04/11/owncloud-charm-updated/"&gt;Jose&lt;/a&gt; develop the new revisions to the &lt;a href="https://jujucharms.com/sidebar/search/precise/owncloud-13/?text=owncloud"&gt;OwnCloud Charm&lt;/a&gt;, and I piloted it every step of the way. We're rounding the 98% completion mark - only pending SSL integration into the charm so its secure by default.&lt;/p&gt;
&lt;p&gt;Without further adeu, Lets deploy Owncloud on Digital Ocean for 30 gigs of cloud storage for $10 USD a month, orchestrated, and updated by Juju.&lt;/p&gt;
&lt;h2&gt;Configuring Juju to talk to Digital Ocean&lt;/h2&gt;
&lt;p&gt;To get started, we'll need to gather some of the requirements.&lt;/p&gt;
&lt;p&gt;Ensure you've got the latest juju stable release. At the time of this writing, its 1.18.1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stable&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next you'll need to fetch a plugin.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/kapilt/juju-digitalocean"&gt;Hazmat's Digital Ocean provider plugin&lt;/a&gt;  from PyPi :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;docean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the Digital Ocean plugin installed, we'll need to add DO to our environments.yaml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;digitalocean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;manual&lt;/span&gt;
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll also need to add our API credentials as an environment variable. According to the installation readme, a good place to put this would be in ~/.bashrc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DO_API_KEY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DO_CLIENT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can find these on your Digital Ocean Account page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Apr/DO_API.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Bootstrapping our DO Service&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;digitalocean&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;docean&lt;/span&gt; &lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mem=1G region=nyc2&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will communicate with the DO API and provision a droplet for you with 1G of memory. The bare minimum to warehouse both the bootstrap node, AND our fileserver. &lt;/p&gt;
&lt;h2&gt;Deploying OwnCloud&lt;/h2&gt;
&lt;p&gt;Now that we've gotten all the hard stuff out of the way. We're ready to deploy and configure OwnCloud. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;owncloud&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This deploys owncloud to our bootstrap node. This is not the &lt;em&gt;ideal&lt;/em&gt; solution, but I wanted to consume 1 node, and didn't really care about scale-out for OwnCloud. My particular setup will be one user, many devices. And 30GB of storage is plenty to replace my free 5GB provided by U1.&lt;/p&gt;
&lt;h4&gt;Caveats to deploying on your bootstrap node&lt;/h4&gt;
&lt;p&gt;This will limit your ability to scale, and you'll lose some disk space to the juju components and logs. You've been warned that while this works, its not a recommended practice for any other Juju Deployments.&lt;/p&gt;
&lt;h4&gt;Notes on configuration&lt;/h4&gt;
&lt;p&gt;Owncloud supports 2 backends. It deploys as a standalone service with SQLite DB support, and supports MySQL as the backend for scale out usage. Since I'm a single user, and I'm not planning on scaling out, we're done configuring owncloud from Juju - as everything is setup on first login when its deployed as a stand alone service.&lt;/p&gt;
&lt;h3&gt;Setup Owncloud&lt;/h3&gt;
&lt;p&gt;Connect to the deployed owncloud server by opening a browser and connecting to the public IP of your owncloud instance. You can discern the public IP of your OwnCloud by running &lt;code&gt;juju status&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;owncloud&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;started&lt;/span&gt;
    &lt;span class="n"&gt;agent&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.19.0&lt;/span&gt;
    &lt;span class="nl"&gt;machine:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;172.22.13.173&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On first run, you will be prompted to define your administrative user. The remainder of the settings while tempting to tweak - should be left as their defaults.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Apr/do_first_run.png" /&gt;&lt;/p&gt;
&lt;p&gt;With the server component completed. Lets take a look at getting the rest of the ecosystem setup, starting with the PC.&lt;/p&gt;
&lt;h2&gt;Connecting OwnCloud to your PCs&lt;/h2&gt;
&lt;p&gt;OwnCloud provides a client app available from the Ubuntu Software Center&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Apr/owncloud_client_software_center.png" /&gt;&lt;/p&gt;
&lt;p&gt;Easily installed via apt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;owncloud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/content/images/2014/Apr/do_client_screen-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;The configuration here is very straight forward, and can mimic the U1 behavior if you opt out of picking a "parent" sync directory to sync all your files. You'll need to start with that configuration, but remove it and pick individual directories to sync, with a corresponding directory on the owncloud server. See the example above.&lt;/p&gt;
&lt;h2&gt;Replacing the Mobile Component&lt;/h2&gt;
&lt;p&gt;Owncloud sync doesn't have to just stop at your desktop. I explored some of the offerings in the Google Play store to build the story for replacing U1 on the phone with OwnCloud.&lt;/p&gt;
&lt;h4&gt;Files&lt;/h4&gt;
&lt;p&gt;The primary task of ownCloud is, of course, file storage and sharing. ownCloud implements WebDAV interface to serve files. This means that you can use any of WebDAV applications available in Google Play which are plenty. There is an official application which costs $1 and doesn't do a lot, but is nice to have anyway. It allows you to view your cloud directories and download individual files for offline usage (similar to Dropbox and Google Drive clients). As a pleasant bonus, it provides Instant Upload feature for your photos, so if you tick the respective checkbox your pics will be automatically uploaded to your cloud (instead of Google+).&lt;/p&gt;
&lt;p&gt;Because I required something more automatic, I installed FolderSync Lite to synchronize cloud folders with those on the device. It operates the same as desktop ownCloud client - you specify folders you want to synchronize and respective local directories, sync interval, overwrite policies etc etc; and it will download/upload files in these folders according to the rules. There is also a paid version of the app, but I don't really notice the limitations of the free one.&lt;/p&gt;
&lt;h4&gt;Calendar&lt;/h4&gt;
&lt;p&gt;Calendar functionality in ownCloud is done using… wait for it… CalDAV. As always, we head to the Play Market and shell out another three bucks for &lt;a href="https://play.google.com/store/apps/details?id=org.dmfs.caldav.lib"&gt;CalDAV-Sync&lt;/a&gt;.This one does what it is supposed to do, with no real complaints. The Android stock Calendar suffices completely.&lt;/p&gt;
&lt;p&gt;A small hack I had to employ on the server side because ownCloud does not support iCal subscriptions. The solution is vividly described &lt;a href="http://forum.owncloud.org/viewtopic.php?f=8&amp;amp;t=11576"&gt;here&lt;/a&gt;. Basically you have to set up a cron job that fetches calendar entries from the link and pushes them to ownCloud via CLI WebDAV client cadaver.&lt;/p&gt;
&lt;h4&gt;Music&lt;/h4&gt;
&lt;p&gt;OwnCloud can store your music and play it in the browser. But what's more cool is that it can stream music via Ampache, and then you can listen to this stream using any Ampache-included music player. I haven't got to using this feature just yet, as I don't want to fill all my DO-provided storage with music (and it will take a while too). But having a personal Spotify sounds like a fun idea to me.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;Managing and book-keeping all your data yourself is partly a vanity endeavor. You spend a good chunk of time on stuff you otherwise wouldn't do. But in the end of the day the warm fuzzy feeling of having everything under your control makes it worth the struggle. This, and the ability to backup all your data in a single shell command. So be safe, be aware.&lt;/p&gt;</summary><category term="juju"></category><category term="owncloud"></category><category term="digitalocean"></category><category term="ubuntu"></category><category term="planet"></category></entry><entry><title>IPDB - the repl you didn't know about</title><link href="http://blog.dasroot.net/ipdb-the-repl-you-didnt-know-about.html" rel="alternate"></link><updated>2014-03-17T19:03:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-03-17:ipdb-the-repl-you-didnt-know-about.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Often times when debugging in python as a newbie you'll take the javascript approach of putting print statements all over your code. When it comes time to release the modifications and push upstream, its not uncommon to have a stray print statement left in there.&lt;/p&gt;
&lt;p&gt;Another approach would be to drop into ipython (or python) and run interactive mode, keying in your statements or set %cpaste - and paste in the code. But in the instance of Amulet testing, this means we have to sit through another environment standup, or we've broken stride with our normal development workflow.&lt;/p&gt;
&lt;p&gt;I set out to find a tool that was akin to ruby's &lt;strong&gt;pry&lt;/strong&gt; debugger. &lt;/p&gt;
&lt;h3&gt;IPDB - the debugger I didn't know existed&lt;/h3&gt;
&lt;p&gt;IPDB is a great tool. It's &lt;em&gt;exactly&lt;/em&gt; what I was looking for.&lt;/p&gt;
&lt;p&gt;It's a typical module include at the top of your file, and you call a method ipdb.set_trace() to act as a breakpoint in your code.&lt;/p&gt;
&lt;p&gt;I recorded a quick screencast to illustrate the usage of IPDB and how it applys to the amulet test writing workflow.&lt;/p&gt;
&lt;iframe width="560" height="315" src="//www.youtube.com/embed/cxKRCCaBnMY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="juju"></category><category term="python"></category><category term="debugging"></category><category term="amulet"></category></entry><entry><title>Netcat as a quick and dirty request debugger</title><link href="http://blog.dasroot.net/netcat-as-a-quick-and-dirty-request-debugger.html" rel="alternate"></link><updated>2014-03-12T18:03:00-04:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-03-12:netcat-as-a-quick-and-dirty-request-debugger.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Today I discovered a really neat use case for netcat. Which in itself is an extremely powerful TCP utility. I was somewhat ashamed I had not seen/heard of it before now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Situation&lt;/strong&gt; - I'm posting data chunks as a file is modified on disk. There is a use case where all this data must be urlencoded, ready for transit over an SSL pipe, and appended to the proper output identifier on the server. &lt;/p&gt;
&lt;p&gt;While developing this python daemon I realized:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"I'm going to need a daemon setup on the server to receive this information..." &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I was nowhere near ready to code this component of the application.&lt;/p&gt;
&lt;h3&gt;Enter Netcat!&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;netcat&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This spins up a TCP listener on port 8000, and prints all incoming traffic to STDOUT.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Listening&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tcp&lt;/span&gt;&lt;span class="cm"&gt;/*] accepted (family 2, sport 50572)&lt;/span&gt;
&lt;span class="cm"&gt;POST / HTTP/1.1&lt;/span&gt;
&lt;span class="cm"&gt;Host: localhost:8000&lt;/span&gt;
&lt;span class="cm"&gt;Content-Length: 26&lt;/span&gt;
&lt;span class="cm"&gt;Content-Type: application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class="cm"&gt;Accept-Encoding: gzip, deflate, compress&lt;/span&gt;
&lt;span class="cm"&gt;Accept: */&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Agent&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.2.1&lt;/span&gt; &lt;span class="n"&gt;CPython&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;2.7.5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;3.11.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;

&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;RAAAA&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="cli"></category><category term="netcat"></category><category term="debugging"></category></entry><entry><title>Writing Juju Charms on OSX</title><link href="http://blog.dasroot.net/writing-juju-charms-on-osx.html" rel="alternate"></link><updated>2014-03-06T11:03:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-03-06:writing-juju-charms-on-osx.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Developing charms on Ubuntu is an extremely straight forward process thanks to the addition of the local provider. LXC containers spin up quickly, integrate directly into your desktop OS, and leave you with very little configuration needed out of the box to get started.&lt;/p&gt;
&lt;p&gt;What about users on OSX? What's their developer story like? The technical limitation is that OS X does not support operating system-level virtualization, like containers in Linux. The next best thing is to use a virtualization wrapper solution like &lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;For those of you that dislike reading, here's a video that presents the TL;DR &lt;/p&gt;
&lt;iframe width="420" height="315" src="//www.youtube.com/embed/TSLJ22ntPQA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h3&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;To start you will want to ensure you've got the following tools installed on your development machine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://juju.ubuntu.com"&gt;Juju&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Fetching the box&lt;/h4&gt;
&lt;p&gt;Head over to the &lt;a href="https://juju.ubuntu.com/docs/config-vagrant.html"&gt;Juju Vagrant&lt;/a&gt; provider documentation. We'll need to fetch the latest basebox for Vagrant. I recommend using the precise basebox, or whatever the current LTS release vagrant image is. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;JujuBox&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-juju-vagrant-disk1.box&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This process takes a short while to complete, as its downloading a 200mb virtual machine image. Once its complete you can verify everything completed correctly by listing out the boxes that vagrant is tracking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see &lt;strong&gt;JujuBox&lt;/strong&gt; listed, we're ready to proceed to the next step.&lt;/p&gt;
&lt;h4&gt;Preparing our local charm repository&lt;/h4&gt;
&lt;p&gt;We will need to create a directory structure that reflects the current standard for juju charm repositories. I recommend putting this in $HOME&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;charms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feel free to add any other LTS based target directory, for example if you were to target Trusty Tahr as a release for your charm, the command would be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;charms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trusty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For the remainder of this tutorial, I will assume we are targeting Precise, as its the current LTS target of choice.&lt;/p&gt;
&lt;h4&gt;Installing Charm-Tools&lt;/h4&gt;
&lt;p&gt;Now is a good time to fetch Charm Tools. But what are charm tools you ask?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Charm Tools offer a means for users and charm authors to create, search, fetch, update, and manage charms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These can be installed via homebrew.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Creating our first charm&lt;/h4&gt;
&lt;p&gt;Lets charm up GenghisApp - a single page MongoDB adminsitration app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;charms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precise&lt;/span&gt;
&lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;genghis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a skeleton structure of a charm ready for you to edit and populate with your services deployment and orchestration logic. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;copyright&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;changed&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;upgrade&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;charm&lt;/span&gt;
&lt;span class="err"&gt;│  &lt;/span&gt; &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;relation&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;joined&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;README&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;revision&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Writing the Charm&lt;/h5&gt;
&lt;p&gt;We'll start by editing the metadata.yaml to populate the information about our charm.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;No Code displayed? refresh, there seems to be a bug with Gists in my theme&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script src="https://gist.github.com/chuckbutler/9393419.js"&gt;&lt;/script&gt;

&lt;p&gt;Now that juju knows something about our service we're ready to start writing the hooks.&lt;/p&gt;
&lt;p&gt;I'll include a few brief gists of the hooks for brevity&lt;/p&gt;
&lt;script src="https://gist.github.com/chuckbutler/9393551.js"&gt;&lt;/script&gt;

&lt;h4&gt;Preparing Vagrant&lt;/h4&gt;
&lt;p&gt;Since vagrant is going to be our work horse, we'll want to make sure its aware of all our charms, not just the current charm we are working on. With that in mind, we need to switch feet and prepare the environment since we are ready to test our Genghis service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;charms&lt;/span&gt;
&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;JujuBox&lt;/span&gt;
&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Vagrant Bootstrap" src="/content/images/2014/Mar/charles_Bushido__10_0_5_136____byobu_028.png" /&gt;&lt;/p&gt;
&lt;p&gt;You now have a Juju installation ready to be used for testing your charm on OSX, and a slick Juju-Gui to interface with your services. Validate that the GUI is accessible from http://localhost:6080&lt;/p&gt;
&lt;p&gt;The password is output in your console feedback from the juju bootstrap.&lt;/p&gt;
&lt;h5&gt;Some important things to note about our vagrant environment&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Live charm repository directory mapping (all your charms in $HOME/charms are available in the /vagrant directory of our JujuBox&lt;/li&gt;
&lt;li&gt;We are running juju 1.16.6 at the time of this writing&lt;/li&gt;
&lt;li&gt;To interface with charms in our vagrant environment, we will need to &lt;code&gt;vpn&lt;/code&gt; all our traffic into this virtual machine (more on that later)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deploying our charm in vagrant&lt;/h3&gt;
&lt;p&gt;You'll need to enter the juju environment we just bootstrapped in $HOME/charms&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;genghis&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are now free to watch progress through the GUI&lt;/p&gt;
&lt;p&gt;&lt;img alt="juju-gui" src="/content/images/2014/Mar/Juju_Admin___Google_Chrome_029.png" /&gt;&lt;/p&gt;
&lt;p&gt;When the Genghis badge turns green, we are ready to vpn our traffic through the vagrant image and interface with the Genghis server&lt;/p&gt;
&lt;h3&gt;Routing traffic with sshuttle&lt;/h3&gt;
&lt;p&gt;Ensure that you have sshuttle installed, once installed you can skip the &lt;code&gt;brew install&lt;/code&gt; line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;sshuttle&lt;/span&gt;
&lt;span class="n"&gt;sshuttle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2222&lt;/span&gt; &lt;span class="mf"&gt;10.0.3.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When prompted for the password enter &lt;code&gt;vagrant&lt;/code&gt; and you should see output similar to the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/charles_Bushido__10_0_5_136____byobu_030.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now we are free to connect to genghis. Open up the Genghis running unit list and click on the Genghis host, then click on the port 80 link in the service detail.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/Juju_Admin___Google_Chrome_031.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Mar/Genghis___Google_Chrome_032.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Celebrate!&lt;/h4&gt;
&lt;p&gt;You've officially become a juju jedi padewon working with vagrant on OSX. Feel free to modify your charm code, and update. No more SCP'ing files to your linux server, or paying expensive cloud bills for development. With the live directory mapping provided by this vagrant setup, any edits you make to your files on the HOST operating system, are reflected in the guest.&lt;/p&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;</summary><category term="juju"></category><category term="osx"></category><category term="vagrant"></category><category term="ubuntu"></category></entry><entry><title>Juju Plugins AHOY!</title><link href="http://blog.dasroot.net/juju-plugins-ahoy.html" rel="alternate"></link><updated>2014-02-15T17:02:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-02-15:juju-plugins-ahoy.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Recently &lt;a href="http://marcoceppi.com"&gt;Marco Ceppi&lt;/a&gt; has started an initiative to aggregate all the relevant juju plugins on GitHub. This is an excellent reason why the Juju community is a stellar example of distributed collaboration. Historically Juju plugins were distributed via Gists, Pastebins, Email, and other non aggregated means. They were a "hobby" of sorts - scratching itches and monkey patching extra features into Juju that didn't make it into core or may not make sense living there.&lt;/p&gt;
&lt;h3&gt;What is a Juju Plugin?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Plugins are simply scripts that are prefixed with juju- which can be found within your system's $PATH. Whenever you type juju $cmd, and $cmd is not an internal command found in juju help commands, Juju attempts to execute juju-$cmd within the context of your system's $PATH which is how the plugin system in Juju works. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Where Do I find these awesome plugins?&lt;/h3&gt;
&lt;p&gt;I'm glad you asked. The repository is hosted on GitHub. &lt;a href="https://github.com/juju/plugins"&gt;juju/plugins&lt;/a&gt; is a "master" repository, warehousing all of the known juju plugins.  Want to add your own? No problem! Just fork the repository, checkout a topic branch for your plugin, and issue a merge request.&lt;/p&gt;
&lt;h4&gt;Workflow&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; 

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then simply open a Pull Request and someone from the juju plugins team will review your work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Feb/Selection_017.png" /&gt;&lt;/p&gt;
&lt;p&gt;I look forward to seeing the new plugins roll in to make everyone's juju experience that much more awesome!&lt;/p&gt;</summary><category term="juju"></category><category term="juju-plugins"></category></entry><entry><title>Moving Papertrail from Bash to Ansible</title><link href="http://blog.dasroot.net/moving-papertrail-from-bash-to-ansible.html" rel="alternate"></link><updated>2014-02-10T20:02:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-02-10:moving-papertrail-from-bash-to-ansible.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;When I initially wrote the PaperTrail(tm) Charm, I thought to myself "Lets get moving as quickly as possible for a MVP, and iterate after its done so I've got a basic blueprint on how it should function." As my first charm, it was extremely simple, fun to write, and functioned well enough that I used it in my own production environment.&lt;/p&gt;
&lt;p&gt;There are some long standing issues I had with how I put it together. Mostly it's pretty hacky in the conditionals, and as I started to extend the functionality it looked pretty gross.&lt;/p&gt;
&lt;p&gt;This was a prime opportunity for me to dust off my reading glasses and take &lt;a href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt; out for a trial run. This was a fairly major rewrite, and took about an hour from start to finish. Even with referencing the &lt;a href="http://docs.ansible.com/list_of_all_modules.html"&gt;Module/API docs&lt;/a&gt; every step of the way. To make things &lt;em&gt;even&lt;/em&gt; easier there is a &lt;a href="https://github.com/absoludity/charm-bootstrap-ansible"&gt;github repository&lt;/a&gt; that provides you with an Ansible boilerplate charm skeleton.  &lt;/p&gt;
&lt;p&gt;If you would like to follow along at home, and see how many lines of code went into the rewrite, take a look at the open Pull Request (at the time of writing, pending unit/integration tests before I send a Merge Proposal to launchpad)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/chuckbutler/papertrail-charm/pull/4/files"&gt;Rewrite Pull Request&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2014/Feb/Workspace_1_003.png" /&gt;&lt;/p&gt;</summary><category term="charming"></category></entry><entry><title>Helpful Juju Workflow One-Liners</title><link href="http://blog.dasroot.net/helpful-juju-charming-one-liners.html" rel="alternate"></link><updated>2014-01-21T11:01:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2014-01-21:helpful-juju-charming-one-liners.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;While performing the great charm audit of 2014, I've encountered quite a few helpful charm commands that I didn't know existed. This won't be a comprehensive and exhaustive list of commands, but an aggregation of those I find the most helpful (consult the manpage/&lt;a href="https://juju.ubuntu.com/docs/"&gt;docs&lt;/a&gt; if you require a full list).&lt;/p&gt;
&lt;h3&gt;charm proof&lt;/h3&gt;
&lt;p&gt;When initially looking at a charm, this runs a lint test against the charm. It will expose any issues from a syntax and presence standpoint against the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README&lt;/li&gt;
&lt;li&gt;metadata.yaml&lt;/li&gt;
&lt;li&gt;configuration.yaml&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Example Output:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;proof&lt;/span&gt;
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;Metadata&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaml&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;charm add readme&lt;/h3&gt;
&lt;p&gt;Generates the boilerplate README.ex - I use this for comparison against the existing README. (hat tip &lt;a href="http://jorgecastro.org"&gt;@jorgecastro&lt;/a&gt;). This is extremely helpful as I often forget what's in the template, in terms of structure and examples. A side effect of this workflow is you are always checking against the latest README boilerplate updates. &lt;/p&gt;
&lt;h3&gt;juju test -e $environment&lt;/h3&gt;
&lt;p&gt;Executes all found integration tests within &lt;code&gt;$CHARM_DIR/tests&lt;/code&gt; in the given environment.&lt;/p&gt;
&lt;h3&gt;lbox propose -cr -for lp:charms/$charm-name&lt;/h3&gt;
&lt;p&gt;Canonical uses the Rietveld tool during code reviews. This was an entirely new process change for me, as I'm used to &lt;a href="http://gitlab.org"&gt;Gitlab&lt;/a&gt; or &lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; diff view for inline code reviews. The lbox utility is a go app, written to simplify the code review process, and provide developers a quicker access point to launchpad &lt;code&gt;Merge Proposals&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Lbox is intelligent in design, the above command will do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a code branch under your user account: lp:~lazypower/charms/precise/mediawiki/tests  &lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;Merge Proposal&lt;/code&gt; against lp:charms/mediawiki&lt;/li&gt;
&lt;li&gt;Push the diff to Rietveld tool &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Source: http://voices.canonical.com/tag/patch/) &lt;/p&gt;
&lt;p&gt;Installing the lbox tool was fairly straight forward thanks in part to the nature of installing Go applications. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lbox&lt;/span&gt;
&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lbox&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You need to have the &lt;code&gt;go-golang&lt;/code&gt; package installed, and have your &lt;code&gt;$GOROOT&lt;/code&gt; and &lt;code&gt;$GOPATH&lt;/code&gt; variables set accordingly. The installation procedure I encountered was in the &lt;code&gt;charm-tools&lt;/code&gt; package in the &lt;code&gt;HACKING.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;h5&gt;Excerpt - HACKING.txt&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;review&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="n"&gt;called&lt;/span&gt; &lt;span class="n"&gt;lbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;
&lt;span class="n"&gt;Ubuntu&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;13.04&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lbox&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lbox&lt;/span&gt;

&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;newer&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt;
&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;Go&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;installing&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//golang.org/doc/install#bsd_linux , making sure to set your GOROOT&lt;/span&gt;
&lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt; &lt;span class="n"&gt;appropriately&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt;
&lt;span class="n"&gt;GOPATH&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;see&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;gopath&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt; &lt;span class="n"&gt;For&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt;
&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GOROOT&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GOPATH&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Then&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;

&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lbox&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;go&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;launchpad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lbox&lt;/span&gt;

&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;

&lt;span class="n"&gt;lbox&lt;/span&gt; &lt;span class="n"&gt;propose&lt;/span&gt;

&lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;merge&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;

&lt;span class="n"&gt;lbox&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Code Snippets&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sometimes its handy to have the service schema printed out to the console during test execution for debugging purposes. This one liner prints the JSON schema of the deployment out during test execution.&lt;/p&gt;</summary><category term="juju"></category></entry><entry><title>Juju expose my-experience</title><link href="http://blog.dasroot.net/juju-expose-my-experience.html" rel="alternate"></link><updated>2013-12-25T22:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-25:juju-expose-my-experience.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;I'm right around the one month mark with my juju lab and I feel like I've progressed a long way in poking around in the space. I went from having watched and briefly interfaced with Juju to deploying clusters of apps to learn how they interface with one another.&lt;/p&gt;
&lt;p&gt;Along the path I've been maintaining a self dialogue that I haven't been able to finish until now. My initial step into the Juju waters was configuration of the PaaS logging service Papertrail. This subordinate charm was more my depth charge to test the waters of the charm submission process. It was simple enough to fleshed out in a few hours having only written one very basic charm before, and came with a pre-existing charm request. &lt;/p&gt;
&lt;p&gt;After I reached the first submission of the Papertrail charm, I immediately set out to work on the Errbit charm using Marco Ceppi's bash driven Discourse charm as a guide. What I yielded was &lt;a href="https://github.com/chuckbutler/errbit-charm/commit/c11c50785c4042933a39857f830100310340fd15"&gt;a functioning&lt;/a&gt; installation routine that utilized Marco's code as a base. It was fun, and survived a hdd swap, but I wanted to flex an area of my brain that I knew more intricately than Bash.&lt;/p&gt;
&lt;h3&gt;Breaking the OPC habit&lt;/h3&gt;
&lt;p&gt;The core belief of chef is that you should write your own cookbooks for your organizational needs and deploy from your in house 'special blend' of configuration magic. In my day job, I have made a few low level dependency cookbooks that give me a 'base' system. Configured to provide clean slate deployment from the development staff, preconfigured server templates for more complex application deployments - typically Rails or PHP stacks, and Capistrano powered release deployment and lifecycle management.&lt;/p&gt;
&lt;p&gt;In my capistrano deploy configurations I was making excessive use of plugins, and gems. Most of which I knew what they were doing, however I always relied on Foreman to manage my process voodoo for environment flags, and pid management. By using these tools I cut myself out of an opportunity to template and reduce deployment time. Foreman generates "OK" application upstart scripts, however I was continually running into corner case issues that wouldn't have happened had I written an upstart script myself, and deployed as a template that gets updated on every release-upgrade This is a prime example of where blindly consuming O.P.C. (Other Peoples Code) will stunt your effective learning. With the sheer volume of applications I was handling the tradeoff was moving fast in the name of progress. When something got in my way I turned instead of studying.  &lt;/p&gt;
&lt;p&gt;With that in mind, I digress back to the theory on using chef, cookbooks, and juju's hooks ecosystem.  I can see chef as a boon in this, but only if there are a baseline set of community audited cookbooks. I feel that the ubuntu community has a high quality gating process through peer review. It feels more fluid, and accepting than the chef peer review process.&lt;/p&gt;
&lt;h4&gt;Orchestration is higher level than configuration management&lt;/h4&gt;
&lt;p&gt;Using chef in juju at first is a bit of a mindwarp. Typical chef server provisioning involves a manifest, and handles deployment of the entire server stack vs a responsive hook system. This may be an indicator that chef has larger object oriented capacity than I was using previously. &lt;/p&gt;
&lt;p&gt;One of the many tradeoffs I took with this approach is mixing and matching the hooks in bash and chef wrappers to prevent diving into the chef-solo agent when all I wanted to do was restart a service. I did however initially provision the start/stop hooks from within chef, and enjoyed watching my logs fill up with false positives from the NGINX upstart provider. Moving the logic into pure bash has removed this hurdle, but sacrifices a bit of the code maintainability. &lt;/p&gt;
&lt;h3&gt;Prototyping with Python is fun and fast&lt;/h3&gt;
&lt;p&gt;My lessons with Juju drove me to look at python. Its powering most of the core juju dev framework like &lt;code&gt;charm-tools&lt;/code&gt; and &lt;code&gt;amulet&lt;/code&gt;. I knew very little python coming into this experience so my first stop was the provisioning helper Fabric. I wrote a quick &lt;a href="http://blog.dasroot.net/fabric-qemu-and-steamcmd/"&gt;deployment routine in Fabric&lt;/a&gt;, and translated the routine to bash driven hooks for the &lt;a href="https://github.com/chuckbutler/starbound-charm/"&gt;Starbound Charm&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm pretty excited about this, as it cuts a corner away from the chef depency. Moving into a Python first provisioner would cut down on the installation hook quite a bit. At writing deploying to an LXC container takes just under 4 minutes. The provisioning portion from time of first hook execution is hanging right around the 2 minute mark. This really makes me want to look into ansible as a provisioning framework.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;p&gt;The juju documentation covered about 95% of my questions. Barring peer relation information not being where I expected to find it; everything else was covered with example cases and API docs.&lt;/p&gt;</summary><category term="juju"></category><category term="experience"></category></entry><entry><title>SteamCMD and SteamGuard</title><link href="http://blog.dasroot.net/steamcmd-and-steamguard.html" rel="alternate"></link><updated>2013-12-24T03:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-24:steamcmd-and-steamguard.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;SteamGuard is a multifactor authentication mechanism for Steam. If Steam does not have a record of the pc you are attempting to sign in with, it will halt the request and leave it in a "pending" state requiring you to enter a passcode they email to you.&lt;/p&gt;
&lt;p&gt;This is awesome!&lt;/p&gt;
&lt;p&gt;Now, enter SteamCMD who's sole purpose in life is to handle the "steam side" of server configuration. This is really a cool concept. &lt;/p&gt;
&lt;p&gt;Let's take a look at using SteamCMD to provision the StarBound server&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Editorial Note&lt;/strong&gt;: In leu of pasting tons of code into Ghost, I'll just point you at the github repository if you want code examples. &lt;a href="https://github.com/chuckbutler/starbound-charm"&gt;https://github.com/chuckbutler/starbound-charm&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SteamCMD offers a nice scriptable way to provision services through runscripts. Looking over the documentation at the Steam Dev Center, it looks extremely straight forward&lt;/p&gt;
&lt;h3&gt;update_starbound.txt runscript&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// update_starbound.txt&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ShutdownOnFailedCommand&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;//set to 0 if updating multiple servers at once&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;NoPromptForPassword&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="no"&gt;STEAMNAME&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="no"&gt;STEAMPASS&lt;/span&gt;
&lt;span class="n"&gt;force_install_dir&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;starbound&lt;/span&gt;
&lt;span class="n"&gt;app_update&lt;/span&gt; &lt;span class="mh"&gt;211820&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;
&lt;span class="n"&gt;quit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Everything is fairly straight forward, the only thing to note is you will have to know the Steam AppID, and can be found at the tail of the community page url.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/Selection_011.png" /&gt;&lt;/p&gt;
&lt;h2&gt;NOTE&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If your account has SteamGuard enabled, it will halt your installation asking for the passcode. When attempting to script the value sent to me from SteamGuard, it drops into the Steam CLI and halts the script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, that was crappy. Is it acceptable to ask my users to disable SteamGuard for their game server?&lt;/p&gt;</summary><category term="gaming"></category><category term="steam"></category></entry><entry><title>Making Juju visible on your LAN</title><link href="http://blog.dasroot.net/making-juju-visible-on-your-lan.html" rel="alternate"></link><updated>2013-12-22T09:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-22:making-juju-visible-on-your-lan.html</id><summary type="html">&lt;hr /&gt;
&lt;blockquote&gt;
&lt;h2&gt;Note: This article has been updated and verified to work on 14.04 on 11/02/2014&lt;/h2&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I continue exploring the depths of Juju and what it offers I've outgrown using lynx to test my setups. Now that I'm running a Juju lab locally I figured its time to break the chains of the sandbox and make the services I'm deploying on my network visible to the machines on my LAN.&lt;/p&gt;
&lt;h3&gt;Setting up the Bridge Adapter&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit your /etc/network/interfaces to make the bridge adapter load from your network DHCP server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;br0&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;br0&lt;/span&gt; &lt;span class="n"&gt;inet&lt;/span&gt; &lt;span class="n"&gt;dhcp&lt;/span&gt;
    &lt;span class="n"&gt;bridge_ports&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;
    &lt;span class="n"&gt;bridge_stp&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
    &lt;span class="n"&gt;bridge_fd&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;bridge_maxwait&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; You may need to change eth0 to your primary network adapter. &lt;/p&gt;
&lt;p&gt;After making the edit you will need to restart the networking services&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;networking&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit /etc/lxc/lxc.conf and set lxc.network.link=br0 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;veth&lt;/span&gt;
&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;br0&lt;/span&gt;
&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;up&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit /etc/default/lxc-net and set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LXC_BRIDGE, &lt;/li&gt;
&lt;li&gt;LXC_ADDR, &lt;/li&gt;
&lt;li&gt;LXC_NETMASK, &lt;/li&gt;
&lt;li&gt;LXC_NETWORK, &lt;/li&gt;
&lt;li&gt;LXC_DHCP_RANGE &amp;amp; &lt;/li&gt;
&lt;li&gt;LXC_DHCP_MAX appropriately &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for my LAN (10.0.2.0/24 type settings) now juju status shows 10.0.2.0/24 addresses for my units and I can access them over the LAN from another machine&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;USE_LXC_BRIDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_BRIDGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;br0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.0.2.20&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_NETMASK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;255.255.255.0&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_NETWORK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.0.2.0/24&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_DHCP_RANGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.0.2.50,10.0.2.99&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LXC_DHCP_MAX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;49&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Its very important to set &lt;code&gt;USE_LXC_BRIDGE&lt;/code&gt; to false, commenting it out wont have the effect of setting it to "false" implicitly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You will also need to specify the network bridge in your &lt;code&gt;$HOME/.juju/environments.yaml&lt;/code&gt; file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="nl"&gt;local:&lt;/span&gt;
    &lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;snipped&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;space&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;
    &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;br0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Special thanks go to &lt;a href="http://askubuntu.com/users/612/popey"&gt;Popey&lt;/a&gt; for this excellent AskUbuntu &lt;a href="http://askubuntu.com/questions/281530/how-do-i-run-juju-on-a-local-server?rq=1"&gt;question&lt;/a&gt; and &lt;a href="http://askubuntu.com/a/282415/6807"&gt;answer&lt;/a&gt; on how to do this with a Precise host.&lt;/p&gt;</summary><category term="juju"></category><category term="networking"></category></entry><entry><title>Starbound with Fabric, Qemu, and SteamCMD</title><link href="http://blog.dasroot.net/fabric-qemu-and-steamcmd.html" rel="alternate"></link><updated>2013-12-22T02:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-22:fabric-qemu-and-steamcmd.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Today has been quite a productive day for exploration of new tech. &lt;strong&gt;Warning :&lt;/strong&gt; this post is going to be all over the place - and scoped to using fabric to bootstrap a host environment, install qemu, and setup a Game Server using SteamCMD.&lt;/p&gt;
&lt;h2&gt;Fabric&lt;/h2&gt;
&lt;p&gt;Most of the juju tools are written in either python or go. This has lead me down the path of researching Python gearing up for my new position at Canonical on the Juju team. During that research I came across Fabric. A tool thats is by no means new to the sysadmin side of linux, but new to me. &lt;/p&gt;
&lt;h4&gt;What is fabric?&lt;/h4&gt;
&lt;p&gt;From the Fabric documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fabric is a Python (2.5 or higher) library and command-line tool for streamlining the use of SSH for application deployment or systems administration tasks.&lt;/p&gt;
&lt;p&gt;It provides a basic suite of operations for executing local or remote shell commands (normally or via sudo) and uploading/downloading files, as well as auxiliary functionality such as prompting the running user for input, or aborting execution.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fabric is essentially a system automation framework built in Python. As I'm starting to wrap my brain around Python, I realize that the tools provided are intended to be as light weight as possible. This really resonates with me, as I felt like Ruby + Gems were a really bloated way to gain functionality at the price of bringing the kitchen sink with you. &lt;/p&gt;
&lt;h2&gt;Stitching server setup with Fabric&lt;/h2&gt;
&lt;p&gt;One thing I've found really annoying since I've landed back in Ubuntu land from a year long hiatus in Mac land is my serious lack of proficiency with shell scripting. I've attempted to write my own setup scripts for automating my &lt;a href="https://github.com/chuckbutler/dotfiles/blob/master/scripts/bootstrap.sh"&gt;environment&lt;/a&gt; &lt;a href="https://github.com/chuckbutler/dotfiles/blob/master/scripts/bootstrap.rb"&gt;setup&lt;/a&gt; a &lt;a href="https://github.com/chuckbutler/dotfilesv2/blob/master/setup_symlinks.sh"&gt;few&lt;/a&gt; times. Each time I've tried to leverage something new I've learned like git submodules...&lt;/p&gt;
&lt;p&gt;&lt;img alt="What a disaster" src="http://i.imgflip.com/5mey3.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I really needed a one stop shop for bootstrapping both workstations and servers without going through the hassle of setting up complex chef-solo cookbooks and ensuring I had all those packed up into a git repository. Most of the time I just need pure ubuntu packages, some dotfiles and a handfull of applications I leverage to effectively maintain my servers.&lt;/p&gt;
&lt;p&gt;Fabric lends itself really well to this. Lets write some bootstrap code for my newly installed Ubuntu Server &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;10.0.2.158&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We have the python shebang, importing modules from the fabric api, and setting our network hosts to execute commands on. &lt;/p&gt;
&lt;p&gt;Now let's add tasks for upgrading the server remotely, and bootstrap our user on the remote machine. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bootstrap_server&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="n"&gt;htop&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/chuckbutler/dotfilesv2.git .dotfiles&amp;#39;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dotfiles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dotvim&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dotfiles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dotvimrc&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vimrc&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dotfiles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gitconfig&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitconfig&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dotfiles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;githelpers&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;githelpers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function fetches a handfull of utilities I require on most of my systems, and clones my dotfiles repository on the machine, sets up the symlinks to get everything working.&lt;/p&gt;
&lt;h6&gt;What you should see:&lt;/h6&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="n"&gt;bootstrap_server&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;10.0.2.158&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;Executing&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bootstrap_server&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;10.0.2.158&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="n"&gt;htop&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;10.0.2.158&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Paydirt! Its executing and has halted on the remote system in interactive mode, prompting me to enter the sudo password before it installs the packages. I like where this is going.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Devops Borat says Great Success!" src="/content/images/2013/Dec/devops_borat_tells_it_like_it_is.png" /&gt;&lt;/p&gt;
&lt;p&gt;Skipping ahead through some dev cycle debugging, we know our next step is to get QEmu installed and running.&lt;/p&gt;
&lt;h4&gt;Criteria&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install the QEmu packages&lt;/li&gt;
&lt;li&gt;Add user to libvirt security group so we can manage QEmu VM's remotely&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;def&lt;/span&gt; &lt;span class="nt"&gt;setup_qemu&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;charles&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
    &lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apt-get install qemu-kvm libvirt-bin bridge-utils -y&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;sudo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;adduser&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;libvirtd&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nt"&gt;local&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo apt-get install virt-manager&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; You don't need to have the &lt;code&gt;local('sudo apt-get install virt-manager')&lt;/code&gt; line to install QEmu on your server. I added this as it stands to reason if I'm running this against a server its on a workstation and will only be run once. May as well grab 2 tasks with a single function.&lt;/p&gt;
&lt;h2&gt;QEmu - Virtualization&lt;/h2&gt;
&lt;h4&gt;Setup ISO Repository&lt;/h4&gt;
&lt;p&gt;We will need to import ISO images for QEmu to install virtual machine images from. I don't like to script this portion of setup as the images will invariably change, and I don't really need to keep a mass repsoitory on every QEmu machine. Your needs may vary, and fabric makes this dead simple. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;nexus&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;iso&lt;/span&gt; 
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="n"&gt;nexus&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//releases.ubuntu.com/precise/ubuntu-12.04.3-server-amd64.iso`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Setup Bridged Networking&lt;/h4&gt;
&lt;h6&gt;The following instructions are to be treated as a generic overview of how I enabled bridged networking and is in no way comprehensive or complete. You could break your networking if this is done improperly. You have been warned.&lt;/h6&gt;
&lt;p&gt;Following the Ubuntu Community documentation &lt;a href="https://help.ubuntu.com/community/KVM/Networking"&gt;here&lt;/a&gt; You will need to make some minor system edits:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;libcap2&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;setcap&lt;/span&gt; &lt;span class="n"&gt;cap_net_admin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ei&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;qemu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;note&lt;/em&gt; I'm not positive this is required according to &lt;a href="http://askubuntu.com/questions/179508/kvm-bridged-network-not-working"&gt;this&lt;/a&gt; AU post.&lt;/p&gt;
&lt;p&gt;You will need to create the Bridged device for QEmu to route requests through. This is achieved with the &lt;code&gt;bridge-utils&lt;/code&gt; package and adding the following to &lt;code&gt;/etc/networking/interfaces&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;br0&lt;/span&gt;
&lt;span class="n"&gt;iface&lt;/span&gt; &lt;span class="n"&gt;br0&lt;/span&gt; &lt;span class="n"&gt;inet&lt;/span&gt; &lt;span class="n"&gt;dhcp&lt;/span&gt;
    &lt;span class="n"&gt;bridge_ports&lt;/span&gt; &lt;span class="n"&gt;eth0&lt;/span&gt;
    &lt;span class="n"&gt;bridge_stp&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt;
    &lt;span class="n"&gt;bridge_fd&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;bridge_maxwait&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reboot and your newly made QEmu images will be able to be independent units on the network. &lt;/p&gt;
&lt;p&gt;Lets bootstrap a new machine for the Starbound Server. Fire up virt-manager &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/virt_manager.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Connect to your QEmu server 
&lt;img alt="" src="/content/images/2013/Dec/Selection_002.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You may need to enter the IP Address of your remote server in the Hostname field unless you have mapped them via DNS, /etc/hosts or through other means of DNS Resolution.&lt;/p&gt;
&lt;p&gt;Create a new machine
&lt;img alt="" src="/content/images/2013/Dec/Selection_003.png" /&gt;&lt;/p&gt;
&lt;p&gt;Set the Installation Media
&lt;img alt="" src="/content/images/2013/Dec/Selection_004.png" /&gt;&lt;/p&gt;
&lt;p&gt;Set your hardware constraints
&lt;img alt="" src="/content/images/2013/Dec/Selection_005.png" /&gt;&lt;/p&gt;
&lt;p&gt;Allocate Space for the root disk
&lt;img alt="" src="/content/images/2013/Dec/Selection_006.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finalize Settings including our Bridged networking device
&lt;img alt="" src="/content/images/2013/Dec/Selection_007.png" /&gt;&lt;/p&gt;
&lt;p&gt;Click Finish and install Ubuntu Server as normal&lt;/p&gt;
&lt;h3&gt;Starbound Dedicated Server via SteamCMD&lt;/h3&gt;
&lt;p&gt;Now onward with the real reason we started this adventure. To setup a dedicated Starbound Server. &lt;/p&gt;
&lt;p&gt;Steam is my preferred method of fetching updates for Starbound since it uses the SteamPipe CDN its quick and painless. SteamCMD makes setting up dedicated servers a snap for updates. &lt;/p&gt;
&lt;p&gt;If you are unfamilar with SteamCMD, go read &lt;a href="https://developer.valvesoftware.com/wiki/SteamCMD"&gt;this&lt;/a&gt; first.&lt;/p&gt;
&lt;h4&gt;Installing SteamCMD with Fabric&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;bootstrap_starbound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lib32gcc1&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//media.steampowered.com/installer/steamcmd_linux.tar.gz&amp;#39;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;xvfz&lt;/span&gt; &lt;span class="n"&gt;steamcmd_linux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;steamcmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;force_install_dir&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;starbound&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;app_update&lt;/span&gt; &lt;span class="mi"&gt;211820&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To do this proper you will need to set your env.hostnames like we did above to include the IP of our newly provisioned starbound virtual machine.&lt;/p&gt;
&lt;p&gt;With all this completed. you now have your own dedicated Starbound server provisioned by steam. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-- Will update later with fabric config to start/stop the starbound server --&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Until then, Go Forth and Conquer traveller.
&lt;img alt="" src="http://cloud-2.steampowered.com/ugc/486685587177079925/0C48E99D41E5E9E07972169D5DEFD3D306C47CB0/" /&gt;&lt;/p&gt;</summary><category term="fabric"></category><category term="python"></category><category term="deploy"></category><category term="qemu"></category><category term="steam"></category></entry><entry><title>Cooking the Errbit charm with Chef</title><link href="http://blog.dasroot.net/cooking-the-errbit-charm-with-chef.html" rel="alternate"></link><updated>2013-12-14T23:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-14:cooking-the-errbit-charm-with-chef.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;My good friend &lt;a href="http://marcoceppi.com"&gt;Marco Ceppi&lt;/a&gt; sent me a link to a github repository for Juju Chef Helpers : &lt;a href="https://github.com/Altoros/juju-charm-chef"&gt;https://github.com/Altoros/juju-charm-chef&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have to admit, I'm really happy this was here. I was brain bending around how I was going to try to integrate chef as my provisioner of choice. At first glance its a pure abstraction of the chef provisioner in charm hook format. Each aspect of the charm correlates to a chef cookbook and associated recipes. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/interesting_call_tracking.jpeg" /&gt;&lt;/p&gt;
&lt;h2&gt;Translating the hooks&lt;/h2&gt;
&lt;p&gt;Changing installation from a Bash script to the current incantation in chef was a learning curve. I tried to keep myself away from consuming too many cookbooks since I wanted to display a reliance on being clever and understanding the application I was packaging and not demonstrating pure use of chef. This may change in the near future.&lt;/p&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include the apt cookbook for the LWRPS&lt;/span&gt;
&lt;span class="n"&gt;include_recipe&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apt&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# Add the 10gen repository for MongoDB&lt;/span&gt;
&lt;span class="n"&gt;apt_repository&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodb-10gen&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://downloads-distro.mongodb.org/repo/ubuntu-upstart&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dist&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;components&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10gen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;keyserver&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;keyserver.ubuntu.com&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;7F0CEB10&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far so good in straightforwardness. This is the prep work for the installation of MongoDB&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodb-10gen&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
  &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exist&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$CHARM_DIR/.mongodb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="cp"&gt;#install dependencies&lt;/span&gt;
&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libxslt-dev&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;libxml2-dev&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nginx&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Package installation  - notice the &lt;code&gt;not_if File.exist&lt;/code&gt; statement above. We are checking for a sentinel that tells us if the mongodb relationship is present.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;home&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;supports&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;manage_home&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit/errbit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sync&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;juju_port&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;chown -R errbit:errbit /home/errbit/errbit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally setup the application user, clone the source code, and open port 80&lt;/p&gt;
&lt;h3&gt;Config-Changed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#drop the templates&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit/errbit/config/config.yml&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0660&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;config.yml.erb&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
   &lt;span class="nl"&gt;confirm_resolve:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;confirm_resolve&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;gravatar:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;gravatar&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_host:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_host&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_domain:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_domain&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_port:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_port&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_starttls_auto:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_starttls_auto&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_user:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_user&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="nl"&gt;smtp_pass:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;smtp_pass&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
   &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit/errbit/config/mongoid.yml&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0660&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongoid.yml.erb&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;mongo_uri&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodb://localhost:27017/errbit&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;not_if&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;$CHARM_DIR/.mongodb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="cp"&gt;#delete existing upstart templates if they exist&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/init/errbit.conf&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/init/errbit-web.conf&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="cp"&gt;#setup upstart templates&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/init/errbit.conf&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/init/errbit-web.conf&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;


&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit/errbit/config/unicorn.rb&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unicorn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nl"&gt;unicorn_workers:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;unicorn_workers&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;


&lt;span class="cp"&gt;#setup the NGINX configuration&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/nginx/sites-available/errbit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nl"&gt;hostname:&lt;/span&gt; &lt;span class="n"&gt;config_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/nginx/sites-enabled/errbit&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/nginx/sites-available/errbit&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="cp"&gt;#TODO: document that we remove the default nginx vhost&lt;/span&gt;
&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/etc/nginx/sites-enabled/default&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;config-changed starts out populating a majority of the templates we need in order to run in our juju environment. Sets up the database connection template, the nginx config, unicorn config, all the stuff we normally leave to capistrano &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#Prep the post-deployment script to circumvent chef&amp;#39;s personality conflicts&lt;/span&gt;
&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/tmp/bundler.sh&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="mo"&gt;0777&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;erb&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is where I had difficulty. I didn't know how to complete the deployment in chef. So I cheated and built a shell script to handle calling all the rake tasks we want to be executed as wrap up of the deployment.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; : I also ran into an odd issue - when running bundle install from the execute resource within chef, it always ran in the $CHARM_DIR re-packing the chef-solo Gemfile.lock in deployment mode. This warrants further investigation &lt;/p&gt;
&lt;p&gt;Ok cool, we're setup with errbit. Chef has taken care of most of the heavy lifting. &lt;/p&gt;
&lt;p&gt;If you want to see the templates, you can view them from the &lt;a href="https://github.com/chuckbutler/errbit-charm-chef"&gt;github repository&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Relationship Hook Sequence&lt;/h3&gt;
&lt;p&gt;Relationship hooks are processed anytime a relationship joins, parts, or changes configuration. This is where you can make real magic happen. For example the wordpress charm speaks from the Wordpress unit to the connecting MySQL database unit to provision a user, generate a password, and hand that data back across the wire to populate wordpresses configuration files.&lt;/p&gt;
&lt;p&gt;In order to fully consume this, you have to know which hooks are called during the &lt;code&gt;juju add-relation&lt;/code&gt; phase, and the &lt;code&gt;juju remove-relation&lt;/code&gt; phase. &lt;/p&gt;
&lt;h3&gt;juju add-relation&lt;/h3&gt;
&lt;h4&gt;mongodb-relation-joined&lt;/h4&gt;
&lt;p&gt;as the MongoDB unit and the Errbit unit have a relationship added, we need to dump the MongoDB Database in /mnt to take advantage of cloud storage. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#cleanup any stale dumps residing in ephemeral storage&lt;/span&gt;
&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mnt/mongo-data&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/mnt/mongo-data&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodump&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodump -h localhost -d errbit -o /mnt/mongo-data&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;mongodb-relation-changed&lt;/h4&gt;
&lt;p&gt;The relation-changed hook will be run everytime the remote system receives a configuration change, and is also the last hook executed during the &lt;code&gt;juju relation-add&lt;/code&gt; phase of hook execution.&lt;/p&gt;
&lt;p&gt;My first challenge was figuring out how I was going to fetch the relationship information from MongoDB. Since Mongodb by default doesn't require db user accounts, its a safe assumption to just use the host credentials in the MongoDB URI&lt;/p&gt;
&lt;p&gt;All of the information required to build the relationship is defined by the interface of the connecting MongoDB unit. This information is provided to us by the Juju Helpers cookbook through &lt;code&gt;relation_get&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.3.233&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;27017&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;private-address&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.0.3.233&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;replset&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;database&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;securerandom&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;mongodb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;host:&lt;/span&gt; &lt;span class="n"&gt;relation_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nl"&gt;port:&lt;/span&gt; &lt;span class="n"&gt;relation_get&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nl"&gt;database:&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;# This failout condition will do nothing&lt;/span&gt;
&lt;span class="cp"&gt;# if we cannot find the relationship details.&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;mongodb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Waiting for all attributes to be set&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;

  &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/errbit/errbit/config/mongoid.yml&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="nl"&gt;mongo_uri:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodb://#{mongodb[:host]}:#{mongodb[:port]}/#{mongodb[:database]}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongoid.yml.erb&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cookbook&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;errbit&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;backup&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
  &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongorestore&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongorestore -h #{relation_get[&amp;#39;hostname&amp;#39;]} -d errbit /mnt/mongo-data/errbit/&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;errbit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;ignore_failure&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="n"&gt;Chef&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Provider&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Upstart&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;restart&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mongodb-10gen&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;purge&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;touch $CHARM_DIR/.mongodb&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nothing&lt;/span&gt;
  &lt;span class="n"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, with this portion completed, we now have our charm deploying the application, and migrating data from the local database if any was accrued, and pushed that to the remote MongoDB provider. &lt;/p&gt;
&lt;!--

#### Links about Backup/Restore on MongoDB

- [Slide Share from 10gen](http://www.slideshare.net/mongodb/mongo-boston2012backuprestore) 

--&gt;</summary><category term="juju"></category><category term="errbit"></category><category term="rails"></category><category term="app-deployment"></category><category term="juju-strano"></category></entry><entry><title>Fail2Ban Blacklisting</title><link href="http://blog.dasroot.net/fail2ban-blacklisting.html" rel="alternate"></link><updated>2013-12-05T14:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-05:fail2ban-blacklisting.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Fail2Ban is a great daemon that monitors log files and bans offending IP when under a brute force attack.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This information is woefully out of date. You should probably be referencing a better tutorial such as the tutorial provided by &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-fail2ban-on-ubuntu-14-04"&gt;Digital Ocean&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s say that you don’t want to apply a permanent ban as the default rule (because it is possibile, setting the bantime at -1 in the relative filter of the jail.conf file). However there is a host that keeps showing up and you're positive its bot related and should not be allowed a "cooldown" period before resuming the attack. &lt;/p&gt;
&lt;p&gt;To permanently ban an IP add the following line under the “actionstart” rule (the actions used when fail2ban starts/restarts):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fail2ban&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blacklist&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;IP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;iptables&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;fail2ban&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;DROP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the configuration file used as default ban action. For example, if your default ban action is “iptables-multiport” (the default rule) you need to add the previous line to the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fail2ban&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;iptables&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;multiport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that, you need to manually add the offending IP, one IP per line, to the file /etc/fail2ban/ip.blacklist &lt;/p&gt;</summary><category term="firewall"></category><category term="admin-post"></category><category term="fail2ban"></category></entry><entry><title>Writing the papertrail charm</title><link href="http://blog.dasroot.net/writing-the-papertrail-charm.html" rel="alternate"></link><updated>2013-12-02T02:12:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-12-02:writing-the-papertrail-charm.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;This is a continuation of &lt;a href="/my-weekend-with-juju"&gt;My Weekend with Juju&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started, we need to invoke a helper provided by &lt;em&gt;charm-tools&lt;/em&gt; to build our charm skeleton.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;papertrail&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create the following directory structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;charms&lt;/li&gt;
&lt;li&gt;precise&lt;ul&gt;
&lt;li&gt;papertrail&lt;/li&gt;
&lt;li&gt;config.yaml&lt;/li&gt;
&lt;li&gt;metadata.yaml&lt;/li&gt;
&lt;li&gt;README.ex&lt;/li&gt;
&lt;li&gt;hooks&lt;ul&gt;
&lt;li&gt;config-changed&lt;/li&gt;
&lt;li&gt;install&lt;/li&gt;
&lt;li&gt;relation-name-relation-broken&lt;/li&gt;
&lt;li&gt;relation-name-relation-changed&lt;/li&gt;
&lt;li&gt;relation-name-relation-departed&lt;/li&gt;
&lt;li&gt;relation-name-relation-joined&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;stop&lt;/li&gt;
&lt;li&gt;upgrade-charm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I find the most useful practice is to dive right into the README and place some sane defaults for charm creation. It provides a focus during development, this style is called "&lt;a href="http://tom.preston-werner.com/2010/08/23/readme-driven-development.html"&gt;Readme Driven Development&lt;/a&gt;" &lt;/p&gt;
&lt;p&gt;Rename README.ex to something a little more fitting of our writing style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt; &lt;span class="n"&gt;README&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open it up in your favorite editor and lets set the context for our charm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#Papertrail Charm&lt;/span&gt;



&lt;span class="n"&gt;Overview&lt;/span&gt;
&lt;span class="o"&gt;--------&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="n"&gt;Papertrailapp&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Papertrail&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.papertrailapp.com). Papertrail provides instant log visibility. Use Papertrail&amp;#39;s time-saving log tools, flexible system groups, team-wide access, long-term archives, charts and analytics exports, monitoring webhooks, and 45-second setup to ship your rsyslog logs, application output, and much more to Papertrail&amp;#39;s logging service.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Excellent, the overview is the first thing presented to a potential user in the store. We've covered the base of explaning what papertrail is, and where I can view more information about the service. &lt;/p&gt;
&lt;p&gt;Think about the principals of juju and identify your configuration properties. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;
&lt;span class="o"&gt;---------------------&lt;/span&gt;
&lt;span class="nl"&gt;options:&lt;/span&gt;
&lt;span class="nl"&gt;port:&lt;/span&gt;
  &lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
  &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="nl"&gt;description:&lt;/span&gt; &lt;span class="n"&gt;Papertrail&lt;/span&gt; &lt;span class="n"&gt;syslog&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;
&lt;span class="nl"&gt;monitorall:&lt;/span&gt;
  &lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
  &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
  &lt;span class="nl"&gt;description:&lt;/span&gt; &lt;span class="n"&gt;Tail&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ship&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="nl"&gt;applicationlogs:&lt;/span&gt;
  &lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;
  &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class="nl"&gt;description:&lt;/span&gt; &lt;span class="n"&gt;Space&lt;/span&gt; &lt;span class="n"&gt;separated&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;logs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mylog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great, we have our first 2 feature sets, and a configuration constraint. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constraint &lt;ul&gt;
&lt;li&gt;Papertrail's port is unique to each account, sometimes each application in the instance of hosted applications like Heroku. Therefore we cannot operate reliably directly after running &lt;br&gt; &lt;code&gt;$ juju depoy papertrail&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature &lt;ul&gt;
&lt;li&gt;if we want 100% coverage on all logs in /var/log there is a predicate feature to enable tailing everything in /var/log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Feature&lt;/li&gt;
&lt;li&gt;for those apps that dont output logs to /var/log, provide the user a means to ship those logs as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at how juju implements these relationships, lets get started on writing our first hook. The &lt;code&gt;install&lt;/code&gt; hook.&lt;/p&gt;
&lt;h3&gt;Install Hook&lt;/h3&gt;
&lt;p&gt;The installation hook takes care of the pre qualifications for running the charm.&lt;/p&gt;
&lt;p&gt;*Commentary left inline as comments&lt;/p&gt;
&lt;script src="https://gist.github.com/chuckbutler/7745943.js"&gt;&lt;/script&gt;

&lt;h3&gt;Start Hook&lt;/h3&gt;
&lt;script src="https://gist.github.com/chuckbutler/7746141.js"&gt;&lt;/script&gt;

&lt;h3&gt;Stop Hook&lt;/h3&gt;
&lt;script src="https://gist.github.com/chuckbutler/7746179.js"&gt;&lt;/script&gt;

&lt;h3&gt;Configuration Changed&lt;/h3&gt;
&lt;script src="https://gist.github.com/chuckbutler/7746188.js"&gt;&lt;/script&gt;

&lt;h4&gt;Now, go forth and deploy!&lt;/h4&gt;
&lt;p&gt;Great, this is enough to start hacking around in the juju gui and see how this works with services deployed from Juju&lt;/p&gt;
&lt;p&gt;In your shell, go ahead and deploy the charm from the local repository&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ juju deploy --repository=charms local:papertrail&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will push the charm from my local charms repository to the Juju controller unit, and deploy the papertrail subordinate service to your application canvas. &lt;/p&gt;
&lt;h2&gt;Charm Configuration&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/Screenshot_from_2013_12_02_01_49_51_5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Expand the charm inspector on the Papertrail charm, and lets set up the port. &lt;/p&gt;
&lt;h2&gt;Charm Relations&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/Screenshot_from_2013_12_02_01_45_17_3.png" /&gt;&lt;/p&gt;
&lt;p&gt;Save the configuration changes, and draw lines to each container application we want to monitor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/Screenshot_from_2013_12_02_01_48_54_2.png" /&gt;&lt;/p&gt;
&lt;p&gt;Inspecting the charm of minecraft reveals the juju-info link relation drawn to papertrail, and lists the dependency chain.&lt;/p&gt;
&lt;h3&gt;Validation&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/JuJu_Systems___Papertrail.png" /&gt;&lt;/p&gt;
&lt;p&gt;Awesome. Now we are ready for submission to the charm store after we tidy up the charm a bit, and place in the license&lt;/p&gt;
&lt;h2&gt;Submission to the review queue&lt;/h2&gt;
&lt;p&gt;First and foremost, read the submission guidelines: &lt;a href="https://juju.ubuntu.com/docs/authors-charm-store.html"&gt;Charm Store Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;An aside on the charm submission process&lt;/h4&gt;
&lt;p&gt;Juju charms live in launchpad. For those that are unfamiliar, Launchpad is Canonical's public tool for software development projects. It provides repository support, bug tracking, and even a build system for personal package repositories.&lt;/p&gt;
&lt;p&gt;With that being said, you should be familiar with Bazaar and the launchpad navigation. &lt;/p&gt;
&lt;h3&gt;Proof the charm&lt;/h3&gt;
&lt;p&gt;The goal is to have no output from charm proof.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bushido&lt;/span&gt; &lt;span class="n"&gt;precise&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;papertrail&lt;/span&gt; &lt;span class="err"&gt;‹&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="err"&gt;»&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;proof&lt;/span&gt;
&lt;span class="nl"&gt;E:&lt;/span&gt; &lt;span class="n"&gt;Includes&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like we need to tidy up and remove the boilerplate icon.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ rm icon.svg&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bushido&lt;/span&gt; &lt;span class="n"&gt;precise&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;papertrail&lt;/span&gt; &lt;span class="err"&gt;‹&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;›&lt;/span&gt; &lt;span class="err"&gt;»&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt; &lt;span class="n"&gt;proof&lt;/span&gt;                                                                                 
&lt;span class="nl"&gt;W:&lt;/span&gt; &lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;svg&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Warnings are better than errors right? Now lets push this up to our launchpad bzr branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;ignore&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gitignore&lt;/span&gt;
&lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;
&lt;span class="n"&gt;bzr&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;:~&lt;/span&gt;&lt;span class="n"&gt;lazypower&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;charms&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precise&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;papertrail&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Start the review process&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Dec/Bug__1023665__Charm_Needed__Papertrailapp____Bugs___Juju_Charms_Collection_15.png" /&gt;&lt;/p&gt;
&lt;p&gt;And now we wait!&lt;/p&gt;</summary><category term="juju"></category><category term="charming"></category></entry><entry><title>My Weekend with JuJu</title><link href="http://blog.dasroot.net/my-weekend-with-juju.html" rel="alternate"></link><updated>2013-11-30T13:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-30:my-weekend-with-juju.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;center&gt;&lt;img alt="Ubuntu Juju" src="http://design.canonical.com/wp-content/uploads/2011/10/juju-464x252.png" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This Thanksgiving weekend I'm experimenting with Juju. I fell in love with the web based configurator with all its relation dragging goodness. Its awesome to know that the recipe's building the services underneath have been audited by a very dedicated community to ensuring I'm running worry free with the most up-to-date standards in installing this particular application stack.&lt;/p&gt;
&lt;p&gt;For those of you that dont know Juju is Canonical's cloud orchestration framework. It sits a layer above any particular provisioner (meaning you can consume chef-solo, puppet, bash scripts, docker, or salt to name a few) to build scalable application stacks.&lt;/p&gt;
&lt;p&gt;The side of Juju that really 'clicks' with me is the flexibility to use whatever language you're most comfortable with. If you've got a ton of experience in spinning up your application servers with Bash, you can keep doing what you're doing. Re-tool the script to run within Juju's hook system and you're ready to start hacking around.&lt;/p&gt;
&lt;p&gt;Before this turns into an elevator pitch, I'm going to assume you're interested and want to get started. Head on over to the &lt;a href="https://juju.ubuntu.com/docs/getting-started.html"&gt;Official Juju Installation Instructions&lt;/a&gt; and spin up your local development environment powered by LXC containers (use the local provider).  &lt;/p&gt;
&lt;h4&gt;TLDR; Install Ubuntu 13.10&lt;/h4&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;h3&gt;Install juju, and setup for Local Deployment&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;repository&lt;/span&gt; &lt;span class="n"&gt;ppa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;stable&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;


&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To understand what just happened - see &lt;a href="https://juju.ubuntu.com/docs/config-local.html"&gt;LXC provider Juju documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;h3&gt;The spiffy Gui&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;deploy&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will deploy the Graphical configuration tool for Juju, allowing you to "shop" for applications within the Charm Store. You can deploy any of the offerings to the Local Provider from this Gui with Drag and Drop simplicity. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Nov/Screenshot_2013_11_30_13_20_44.png" /&gt;&lt;/p&gt;
&lt;p&gt;While the GUI is not a requirement for using Juju, I like the visibility it provides into the stack's I'm creating. I've come to lean on using the GUI and the watch command with juju status.&lt;/p&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;h3&gt;Don't forget the tools!&lt;/h3&gt;
&lt;p&gt;You'll also want to grab a copy of the latest charm tools for assiting in charm authoring. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;charm&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Information Radiator&lt;/h3&gt;
&lt;p&gt;Pairing the watch command with juju status will continually monitor the information that juju status spits back to STDOUT - this effectively turns your console into an information radiator of whats going on within your Juju environment. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;watch&lt;/span&gt; &lt;span class="n"&gt;juju&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/content/images/2013/Nov/Screenshot_2013_11_30_17_46_58.png" /&gt;&lt;/p&gt;
&lt;h4&gt;*observation&lt;/h4&gt;
&lt;p&gt;So far I see a 100% improvement in documentation coming from my experience with Juju in 2011. The documentation has covered everything we needed to get started: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adding the Juju PPA&lt;/li&gt;
&lt;li&gt;Installation of charm-tools from the official repository&lt;/li&gt;
&lt;li&gt;Deploying the GUI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Picking a Charm&lt;/h3&gt;
&lt;p&gt;Juju has a ton of requests for charms already. This is a great place for new charmers to get started in their quest to join the Juju ecosystem. &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://bugs.launchpad.net/charms/+bugs?field.searchtext=&amp;amp;orderby=-importance&amp;amp;field.status%3Alist=NEW&amp;amp;field.status%3Alist=CONFIRMED&amp;amp;field.status%3Alist=TRIAGED&amp;amp;field.status%3Alist=INCOMPLETE_WITH_RESPONSE&amp;amp;field.status%3Alist=INCOMPLETE_WITHOUT_RESPONSE&amp;amp;assignee_option=any&amp;amp;field.assignee=&amp;amp;field.bug_reporter=&amp;amp;field.bug_commenter=&amp;amp;field.subscriber=&amp;amp;field.structural_subscriber=&amp;amp;field.component-empty-marker=1&amp;amp;field.tag=&amp;amp;field.tags_combinator=ANY&amp;amp;field.status_upstream-empty-marker=1&amp;amp;field.has_cve.used=&amp;amp;field.omit_dupes.used=&amp;amp;field.omit_dupes=on&amp;amp;field.affects_me.used=&amp;amp;field.has_no_package.used=&amp;amp;field.has_patch.used=&amp;amp;field.has_branches.used=&amp;amp;field.has_branches=on&amp;amp;field.has_no_branches.used=&amp;amp;field.has_no_branches=on&amp;amp;field.has_blueprints.used=&amp;amp;field.has_blueprints=on&amp;amp;field.has_no_blueprints.used=&amp;amp;field.has_no_blueprints=on&amp;amp;search=Search"&gt;Open Charm Queue&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you notice an open request for a charm, assign it to yourself and prepare to get your hands dirty. For the purpose of this tutorial I chose the charm &lt;a href="https://bugs.launchpad.net/charms/+bug/1023665"&gt;Papertrail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Looking over the charm, it makes perfect sense to integrate this as a Subordinate Charm. As a little background, papertrailapp is a hosted log management service. They utilize rsyslog style log routing, and aggregate logs for major players like GitHub, AirBrake, and more. Its easy to setup, provides awesome retention and a powerful searchable dashboard across all of your tracked logs. &lt;/p&gt;
&lt;h4&gt;An aside on subordinates&lt;/h4&gt;
&lt;p&gt;The following excerpt from the &lt;a href="https://juju.ubuntu.com/docs/authors-subordinate-services.html"&gt;Juju documentation&lt;/a&gt; explains this nicely:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Services are composed of one or more service units. A service unit runs the service's software and is the smallest entity managed by juju. Service units are typically run in an isolated container on a machine with no knowledge or access to other services deployed onto the same machine. Subordinate services allows for units of different services to be deployed into the same container and to have knowledge of each other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this means to you: You don't have to provision another server to run this charm. It "bolts" on to an existing container, providing the functionality of the charm within that running container.&lt;/p&gt;
&lt;p&gt;&lt;a href="/writing-the-papertrail-charm/"&gt;Read part 2 &amp;gt;&amp;gt; &lt;/a&gt;&lt;/p&gt;</summary><category term="juju"></category><category term="weekend-hacks"></category></entry><entry><title>Missing Stuff!</title><link href="http://blog.dasroot.net/missing-stuff.html" rel="alternate"></link><updated>2013-11-26T23:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:missing-stuff.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;I recently ported my octopress blog to Ghost. Please pardon the dust while I track down the assets - I haven't run this blog in quite a while. Its about time I kicked the tires and shook out the cobwebs.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>Developer tips from Grandmas Boy</title><link href="http://blog.dasroot.net/developer-tips-from-grandmas-boy.html" rel="alternate"></link><updated>2013-11-26T21:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:developer-tips-from-grandmas-boy.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;I'm going to make the assumption you've seen Grandmas Boy. If you haven't, here's the trailer.&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/rQ9y4ro4Aw4" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This movie is surprisingly packed with subtext about development, at least in my code centric mind. Without further adeu, I present to you - the things I learned about Software Development from Grandmas Boy.&lt;/p&gt;
&lt;!--  More --&gt;

&lt;h2&gt;If your company has a J.P. It's doing it wrong&lt;/h2&gt;
&lt;p&gt;First lesson to learn : If your company has a JP - you're doing it wrong. When the entire basis of operation of your company funnels through a single developer: "The genius" syndrome will surely hamper productivity. JP was certainly impressive. 3d Modeling, Animation, Development, and running projects in paralell. All from the comfort of his binary clad office pounding out Aphex Twin. &lt;/p&gt;
&lt;iframe width="400" height="80" src="https://rd.io/i/QU4qZjdedsSL" frameborder="0"&gt;&lt;/iframe&gt;

&lt;p&gt;(JP's inspiration music: right around the 5:00 mark)&lt;/p&gt;
&lt;p&gt;If you've ever worked with a JP then you know - isolation is the worst possible thing that can happen to a developer. Coding is a very social activity, and when done right it has wave upon wave of active communication. Code Review, Push rejections, project discussions, and requirement changes. When you remove talent from the hive of creativity - you tend to end up with narrow program scope that fails to deliver on expectations. Nix the JP and hire a team Mr. Cheezle.&lt;/p&gt;
&lt;h2&gt;Encourage growth in team members&lt;/h2&gt;
&lt;p&gt;An eager young tester approaches JP regarding a potential error. Characters in two parts of the game look similar and cause confusion. "Why dont we just render them a different color? Thats cheap, and effective in differentiating them" To which JP pulls an attitude fit (see: The genius syndrome in action) and ejects him from his office. &lt;/p&gt;
&lt;p&gt;In any team environment - you should encourage growth in your team members by actively listening to their ideas. Consider everything! Fresh minds and new eyes over your progress can expose you to elements you had not considered, and may even open up avenues for undiscovered creativity. If you spend time repressing their ideas, its likely that they wont be willing to share future ideas. Should you approach a JP and receive the royal flush - do not self destruct like Caine. You're not a worthless asshole, and you dont deserve to die. Instead you should take pride in the fact that you discovered a problem and presented a solution.  You're a valuable member of any team - and should keep pride in your work.&lt;/p&gt;
&lt;h2&gt;Chores keep your mind prepared for change&lt;/h2&gt;
&lt;p&gt;When Alex moves in with his Grandma, they immediately take advantage of having a strapping young lad in the house and put him to work with chores. While this vexes his usual lazy routine: it provides him a necessary break from worked scope. Testing video games all day and slinging code by night to write DEMONIC - his free time would have been on the decline.&lt;/p&gt;
&lt;p&gt;As developers continue to grind away at problem solving, artists will stay up late at night to perfect the models they are working on - you're depriving your brain of much needed down time. Take a break from the computer. If your mind requires more activity than staring at the TV like a couch spud: read a book. Join a club. Do Chores!&lt;/p&gt;
&lt;h2&gt;Solutions can and will breed new problems&lt;/h2&gt;
&lt;p&gt;True to its word : Murphy's law can and will surface in your work day. &lt;/p&gt;
&lt;p&gt;In an effort to catch up on the work time he was missing, Alex brings home a cable box to give the ladies something to do. The plan immediately backfires and they start an all night marathon of Antiques Road Show. #FAIL &lt;/p&gt;
&lt;p&gt;When you introduce a change, and it causes a death roll: be prepared to think on your feet and adjust the course of action. It's usually a better option to push forward with fixes: you may not have an option to roll back. Alex experiences Murphy's law - and to regain footing he outsmarts his room mates with tickets to Antiques Road Show - and rushes them off to bed so they will be well rested for their big day.&lt;/p&gt;
&lt;h2&gt;Be prepared for someone to do your idea bigger and better&lt;/h2&gt;
&lt;p&gt;As already mentioned, JP was a rockstar game developer. Programming video games since he was 13 he surely thought he had a corner on everything that was awesome... Until he shows up at Alex's house and discovers he had been working on Demonic. Showcasing futuristic mip mapping and better gameplay than what his games offered. While this can be a blow to the ego: reinvention has been the mother of creation for many years. If you build a search engine, someone will build it better. If you aggregate data from a single service, other services will aggregate from &lt;em&gt;ALL&lt;/em&gt; services. It's a fact of life. &lt;/p&gt;
&lt;h2&gt;Don't have a robot vagina&lt;/h2&gt;
&lt;p&gt;While it's a repeat statement: its probably the most important takeaway of all. Do not seperate yourself from the group; especially if ti means that you do not attend out of work activities. The bonding and fun are important to everyone around you. It helps the entire team to unwind and share their experiences in a non threatening environment. Besides, you never know when you'll have fun by accident.&lt;/p&gt;</summary><category term="project-management"></category><category term="process"></category><category term="grandmas-boy"></category><category term="levelup"></category><category term="achivement-unlocked"></category></entry><entry><title>Flirting with disaster</title><link href="http://blog.dasroot.net/flirting-with-disaster.html" rel="alternate"></link><updated>2013-11-26T21:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:flirting-with-disaster.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;It's no secret that I'm having an affiar on .Net -- The problem is, I think I've fallen in love with Ruby. To the point that I want to abscond with ruby and never look back at all the tools I've used over the last 10 years. PHP and .Net both have their place in the ecosystem of programming. But I dont want them anymore. You get so much for free, and so many options. The community is bright and vibrant! Steel City Ruby Conf had me happily hoodwinked and convinced me to give Ruby an honest and hard look.&lt;/p&gt;
&lt;p&gt;Now those of you that know me will say "Oh look, there goes another .Net developer to the ruby fad." - I wont correct you. It was a fad, but Ruby's growing community has one thing that other application fad's dont: A vibrantly aware, active, and friendly community. I have yet to meet a fellow rubyist that's greeted me with an air of self importance. If anything, they are Idempotent. They achieve, share, and humble themselves at the opportunity to spread the knowledge. My previous post about moving into the bazaar was really focused upon this single idea. Working in a .Net shop by trade has taken its toll on my skills - I was beginning to stagnate as a developer. I wasn't learning new things, the tech was horrible to wrangle into submission, Selecting from open source solutions in the framework was riddled with abandoned projects with no help in sight. This is simply not an acceptable solution for me, as a software engineer, to continue growing.&lt;/p&gt;
&lt;p&gt;I've started to weave ruby into the fabric of application development at work. After a failed attempt to bring PHP into the forefront, we agreed that it was not a good solution. So I took the opportunity to hack up a rails app literally overnight and show them what we got for free. Capistrano deployment excited my co-workers. CopyCopter text indexing excited the management. BrowserCMS has excited ME since I wont have to develop a CMS solution from scratch or pay for overpriced bloated .Net solutions. (Umbraco, you suck. .Net webforms? really?!)  &lt;/p&gt;
&lt;p&gt;All in all, I know that I'm flirting with disaster. But this move is going to be a rapid and agile response to a growing maintainability problem I've reached. Workign in marketing means you dont always get full release cycles. You have to be fast on your feet and ready to change at the drop of a hat. When you acquire 4 new clients and the VP demands that you have client sites ready within the week - its as easy as rails new "clientName" - spend 5 minutes configuring gems, databases, and drop in a quick deploy script for staging and you're off and running.&lt;/p&gt;
&lt;p&gt;But enough fanfare for what's already a clear winner. If you don't believe me, you should try it yourself. Take the plunge and whip up an app from scratch in 24 hours. You'll be amazed at how much you get for free.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>An overdue reflection</title><link href="http://blog.dasroot.net/reflection.html" rel="alternate"></link><updated>2013-11-26T21:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:reflection.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;This year has been absolutely crazy. Never in my wildest dreams did I think I would come as far as I have. &lt;/p&gt;
&lt;p&gt;I've always been a hobbyist engineer in the sense that I love hacking on unix systems, and tinkering with application code here and there for random web apps or scratch-your-own-itch applications. However this year was different: not only would I be toiling away building some great client sites; But I also attended 2 conferences, spoke at a school to a cache of eager engineers who wanted to know more about the technical landscape in Pittsburgh, helped found a MongoDB User Group with some co-workers and 10gen, Founded my own company, and stepped down from being middle management back into the engineering role I know and love.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Nov/IMG_0001.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;In a single paragraph I just summed up the highlights of 2013.  Thats a great feeling, to know I've been so focused and articulate in my dicipline. &lt;/p&gt;
&lt;p&gt;I've gone over the soft skills and business landscape. Let's do something geeky and take a look at how my shell alises have evolved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#fix BZRs shit import&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;PYTHONPATH&lt;/span&gt;

&lt;span class="cp"&gt;#vim&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;#sublime&amp;#39;s the new vim&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;sublime&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;#Setup git aliases&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;glg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gcm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;gtl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;


&lt;span class="cp"&gt;#setup ruby aliases&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;bi&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;#locomotive aliases&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;bews&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;wagon&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;bewp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;wagon&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;bewg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;wagon&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;#rails aliases&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;rs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;rg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="cp"&gt;#vagrant aliases&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;vu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;vp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;provision&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Noteable new additions: Vagrant, LocomotiveWagon, and BZR. As you see I've been working fairly extensively in Chef, Vagrant, Juju, and working with a new Rails based CMS: &lt;a href="LocomotiveCMS"&gt;http://www.locomotivecms.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Recent Random Awesomeness&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="/content/images/2013/Nov/IMG_0624_PNG.png" /&gt;
&lt;img alt="" src="/content/images/2013/Nov/IMG_0622_PNG.png" /&gt;
&lt;img alt="" src="/content/images/2013/Nov/IMG_0590_JPG.jpg" /&gt;
&lt;img alt="" src="/content/images/2013/Nov/IMG_0615.jpg" /&gt;
Whats this? Abandoned Cigarettes? Yep - I made the switch to vapor. It's 2013 after all. 
&lt;img alt="" src="/content/images/2013/Nov/IMG_0672_JPG.jpg" /&gt;&lt;/p&gt;</summary><category term="year-in-review"></category></entry><entry><title>Steel City Ruby Conference</title><link href="http://blog.dasroot.net/steel-city-ruby-conference.html" rel="alternate"></link><updated>2013-11-26T21:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:steel-city-ruby-conference.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://www.steelcityrubyconference.org"&gt;&lt;img alt="Steel City Ruby Conference" src="/images/scrc-logo.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had the pleasure of attending the first ever Steel City Ruby Conference. The focus and underlying theme was "Perfect for your first conference" -- and they did not fail to deliver. The talks were given in 45 minute blocks with 20 minute breaks. All the first time attendees were challenged to make 20 new acquantainces. Reinforcing that the subtext of the conference can hold many gems. The speaker lineup brought a multitde of topics ranging from why its important to consider &lt;a href="http://www.slideshare.net/juliepagano/my-technology-will-be-intersectional-lightning2"&gt;intersectional technology&lt;/a&gt; to new goodies in how to power through your every day workflow with &lt;a href="http://www.confreaks.com/videos/988-goruco2012-power-rake"&gt;Power Rake&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juliepagano.com"&gt;Julie Pagano&lt;/a&gt; made some great conference &lt;a href="http://juliepagano.com/blog/2012/08/05/steel-city-ruby-conf-2012-sketchnotes/"&gt;SketchNotes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting the most out of a conference&lt;/li&gt;
&lt;li&gt;Thinking in Objects&lt;/li&gt;
&lt;li&gt;Anti-Opression&lt;/li&gt;
&lt;li&gt;Open Source: How to Give Back&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aaron Patterson encouraged a group hug from the #SCRC crowd&lt;/p&gt;
&lt;p&gt;[&lt;img alt="SCRC12 Group Hug" src="http://desmond.yfrog.com/Himg341/scaled.php?tn=0&amp;amp;server=341&amp;amp;filename=p7xk.jpg&amp;amp;xsize=640&amp;amp;ysize=640" /&gt;]&lt;/p&gt;
&lt;p&gt;There was even a sighting of a Post-It Pacman&lt;/p&gt;
&lt;p&gt;[&lt;img alt="Post it pacman" src="https://p.twimg.com/AzfbJKdCYAATSYV.jpg" /&gt;]&lt;/p&gt;
&lt;p&gt;And I was introduced to some new Pittsburgh area UserGroups. Like &lt;a href="http://steelcloud.github.com/"&gt;SteelCloud&lt;/a&gt; and the &lt;a href="http://pghrb.heroku.com/"&gt;Ruby Brigade&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think to sum it up, the organizers did an Amazing job at putting this conference together. The speakers brought their A-Game, and there were tons of lightning talks. One by my good friend &lt;a href="https://speakerdeck.com/u/jessedearing/p/3-awesome-things-postgres-can-do"&gt;Jesse Dearing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To Catch up on the feed of events - check the &lt;a href="https://twitter.com/#!/search/realtime/%23scrc12"&gt;#scrc12&lt;/a&gt; hashtag.&lt;/p&gt;</summary><category term="pittsburgh"></category><category term="conferences"></category><category term="maiden-voyage"></category><category term="ruby-2"></category></entry><entry><title>Breaking the Rubrik habit</title><link href="http://blog.dasroot.net/breaking-the-rubrik-habit.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:breaking-the-rubrik-habit.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;After setting up octopress it was brought to my attention that every geek from Singapore to LA has an octopress blog that sports the default theme. There was an excellent article that I seem to have misplaced. However the overall premise: "While your blog should focus on quality content, you have to have a desireable stage to present your information. " So I started looking into rapid frameworks for front end design.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;The twitter bootstrap framework came to mind. I've wanted to try it for its clean looks vs using the 930 grid layout. It sports custom form elements, ready to rock javascript elements, and an extremely nice collection of style elements out of the box. Its officially one of the most impressive front end RAD frameworks I've used to date. The class tags are very clear cut and easy to work with. &lt;/p&gt;
&lt;p&gt;It took about 30 minutes to gimp out the header image, and build out the template by hand. Bootstrap makes the markup so much cleaner than I'm used to. Looking at the semantic markup below - (or via view-source) You define your elements with a span# and you have sized grid-ready boxes. The kit comes with several modifier classes as well such as pull-right floats your content to the right of its parent container.  &lt;/p&gt;
&lt;p&gt;The following was the machup I produced in about 30 minutes.&lt;/p&gt;
&lt;p&gt;{% gist 1807500  %}&lt;/p&gt;
&lt;p&gt;To impelement this as your blog theme - you edit the _includes directory templates. Its all logically broken down into a parent calling object (next list): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_includes/head.html&lt;/li&gt;
&lt;li&gt;_includes/header.html &lt;/li&gt;
&lt;li&gt;_includes/navigation.html&lt;/li&gt;
&lt;li&gt;_includes/footer.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Octopress has a few parent display controllers listed in _layouts&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;category_index.html&lt;/li&gt;
&lt;li&gt;default.html&lt;/li&gt;
&lt;li&gt;page.html&lt;/li&gt;
&lt;li&gt;post.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Edit your templates and make sure the proper includes are being called in those layout controllers and you should be up and running in no time! What made this so easy is having built the machup first and then including the files in _include/header.html - snipping bits of style into the _include's as well. All in all - I'm very excited to be hacking away on this project.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>Closure JS Compiler</title><link href="http://blog.dasroot.net/closure-js-compiler.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:closure-js-compiler.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;a href="https://plus.google.com/109692134350783862945"&gt;Nathan Osman&lt;/a&gt; asked me a while back about what I knew of the &lt;a href="http://code.google.com/closure/compiler/"&gt;closure compiler&lt;/a&gt;. At that time, I had &lt;em&gt;no&lt;/em&gt; idea what I was missing. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="http://code.google.com/closure/compiler/"&gt;Closure Compiler&lt;/a&gt; is a tool for making JavaScript download and run faster. It is a true compiler for JavaScript. Instead of compiling from a source language to machine code, it compiles from JavaScript to better JavaScript. It parses your JavaScript, analyzes it, removes dead code and rewrites and minimizes what's left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls.
&lt;small&gt;The official &lt;a href="http://code.google.com/closure/compiler/"&gt;closure compiler&lt;/a&gt; page&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- more --&gt;

&lt;p&gt;Sounds fairly interesting right? As a full time developer, I find myself writing deploy scripts, augmenting continuous build servers, and planning a ton of deployment automation. The &lt;a href="http://www.level-interactive.com"&gt;company&lt;/a&gt; I work for has a TON of managed client sites. We extend their frameworks and augment the front-end elements on a daily basis - akin to the optimization services we offer. I found myself at the eventuality of needing to automate the minification and testing of our javascript. Enter my need for the closure compiler - as jslint and jsminify just wasnt enough. This needed to be light weight and always available - ding! plug it into a webservice.&lt;/p&gt;
&lt;p&gt;While plotting how to do this - I discovered python was an excellent language for this. Instead of messing around with the powershell bits - a python script seems to carry less overhead and perform the same goal with less convoluted syntax. Google provides a default script that reads the script from stdin and prints out the compiled code - the following script is my first attempt at python and a simple modified version of googles own &lt;a href="http://code.google.com/closure/compiler/docs/api-tutorial1.html"&gt;compile.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I set out to write a script that I can use in our Continuous Integration server &lt;em&gt;powered by &lt;a href="http://jenkins-ci.org/"&gt;jenkins&lt;/a&gt;&lt;/em&gt; since it's already running our jsunit tests. Add a trigger for once a test-suite is complete and marks the library as good - run this little gem and auto-minify your javascript.&lt;/p&gt;
&lt;p&gt;{% gist 1812994 %}&lt;/p&gt;
&lt;p&gt;Since I bundled this up for our company deploy scripts - you can follow its evolution &lt;a href="https://github.com/University-Bound/UBound-Utility"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>CRM's and why they suck</title><link href="http://blog.dasroot.net/crms-and-why-they-suck.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:crms-and-why-they-suck.html</id><summary type="html">&lt;hr /&gt;
&lt;h2&gt;CRM's - Who needs them anyway?&lt;/h2&gt;
&lt;p&gt;I was recently tasked with setting up a CRM solution for my job. I for one, want to point out that every last single CRM system I've demo'd has suffered from negligence in implementation, and it just plain sucks when you're trying to white-label a CRM.  No one single CRM will scratch every itch you require as a business entity. You have to modify your workflow across the board to make it worth while.&lt;/p&gt;
&lt;p&gt;Now don't get me wrong. CRM's serve a purpose, and it's a lofty goal that they are attempting to achieve. For most companies you need some system in place to keep track of contacts and what the status is with the last contact. 100+ contacts a day can get EXTREMELY confusing for any one single department to keep track of. For the new readers that don't know; I work for an online marketing agency. We come in contact with circa 300 potential leads a day. Not to mention our 40+ clients, hundreds of affiliates, and other channels. &lt;/p&gt;
&lt;p&gt;So, if every CRM sucks... What do you do? You write your own. How many of us honestly need Email list management as our CRM? My company doesnt. Does yours? How many of us need to manually enter every contacts details? I dont, should &lt;em&gt;YOU?&lt;/em&gt; I want to give back to this space, and offer a cruft-less version of Customer Management. Leads to affiliates to accounts - lets push back in a space that has otherwise been dominated by stale projects demanding too much money for what they offer. &lt;/p&gt;
&lt;p&gt;Who's with me?&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;The following is an example flowchart of how I perceive this to work - using Web to Lead as an example.&lt;/p&gt;
&lt;script src="http://www.gliffy.com/diagramEmbed.js" type="text/javascript"&gt; &lt;/script&gt;

&lt;script type="text/javascript"&gt; gliffy_did = "3311664"; embedGliffy(); &lt;/script&gt;

&lt;p&gt;The beauty in this system is simplicity by design. Currently our reporting system is clunky. We dont have any way to track "first page submits" other than Google Analytics and in page event tracking.. We track page clicks, conversions, and exit traffic. This leaves gigantic gaps in our intelligence reporting. This is where CRM would come into play - we assign leads in the CRM and track its conversion process through the system. Since most of the "white label" CRM solutions are geared towards E-Mail and phone campaigns - this leaves us with an interesting conundrum being nearly web-to-lead exclusive. How do we accomplish this in a SANE method that is flexible enough to support web to lead while not bloating it into a juggernaut that really accomplishes goals we didn't set out to complete? By cutting out the cruft and hoops you would have to jump through - we can establish this as a plugin for our existing systems in a post-receive-hook style HTTP Post - and keep tabs on the data.&lt;/p&gt;
&lt;p&gt;Since we have a Call Center backend to consider as well - specifically Five9 solutions Hosted callcenter softare - through connectors we can achieve the same level of data redundancy. I'll be moving forward with this soon - and posting my findings.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>Doing it right with S3</title><link href="http://blog.dasroot.net/doing-it-right-with-s3.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:doing-it-right-with-s3.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;As some of you know, I'm an avid follower of the brilliant people at &lt;a href="http://www.askubuntu.com"&gt;Ask Ubuntu&lt;/a&gt; and &lt;a href="http://www.jorgecastro.org"&gt;Jorge Castro&lt;/a&gt; had an extremely excellent idea of hosting his &lt;a href="http://www.octopress.org"&gt;Octopress&lt;/a&gt; blog out of AWS S3. This got me thinking - I'm paying upwards of $60 USD a month for hosting through Linode, and since I cut the Wordpress habit next to none of my projects require server side includes, so this was literally money down the chute.&lt;/p&gt;
&lt;p&gt;Hosting my static sites, for example the vcard you see at the footer of my blog, would be an excellent place to start. Move this puppy over to S3, pilot the difficulty rating of just how hard it is and move forward with an execution of the rest of my pages. (Also, we can thank the fine people over at &lt;a href="http://www.github.com"&gt;GitHub&lt;/a&gt; for powering this blog instance.)&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;&lt;img src="http://profile.ak.fbcdn.net/hprofile-ak-snc4/41793_290917647635382_811386155_q.jpg" alt="Challenge Accepted" style="float: left;"&gt;&lt;/p&gt;
&lt;p&gt;Since I have nearly no experience in working with AWS from a linux box, this was one of those moments where I knew it was time to tug on my bootstraps and learn something new.&lt;/p&gt;
&lt;p&gt;My first task was to figure out just how I was going to interface with an S3 bucket on Ubuntu. A quick google search yielded s3cmd. This command line tool affords you loads of flexibility, and you guessed it, I can script an entire site deployment with this handy utility. Why thank you CLI programmers of the universe. You give me warm and fuzzy feelings all over. &lt;/p&gt;
&lt;h4&gt;Great, I have the technology, now what?&lt;/h4&gt;
&lt;p&gt;If you dont currently have an AWS account you'll need to sign up for one.&lt;/p&gt;
&lt;p&gt;Import your S3 Credentials into s3cmd as follows&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s3cmd&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;s3cmd will prompt you for your AWS public and private keys. Ask about SSL encryption for data transfer settings and boom you're ready to start using s3cmd. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;s3cmd&lt;/span&gt; &lt;span class="nx"&gt;mb&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;yourbucketname&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create your s3 bucket, basically just alotting a bin for you to start placing files. With the bucket created, you should enable serving of web-content from the bin - set the index document, and if you have an error page the optional error html. (this removes the AWS XML error page you'll get when users 404 your site structure) &lt;/p&gt;
&lt;p&gt;I did that bit in the AWS management console itself - as depicted below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS S3 Console" src="/img/aws-s3-console.png" /&gt;&lt;/p&gt;
&lt;p&gt;With this step completed, you're free to upload your files. - One caveat that I discovered was if you dont implicitly define public Access, aws defaults to private ACL's. Read more on AWS S3 Access Control List (ACLs) &lt;a href="http://aws.amazon.com/articles/5050"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When pushing files to your S3 bucket, you can define the acl inline like so&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;s3cmd&lt;/span&gt; &lt;span class="nx"&gt;put&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;acl&lt;/span&gt;&lt;span class="na"&gt;-public&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;recursive&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//&amp;lt;yourbucketname&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopefully with this short introduction, you have a good enough overview to start moving your flat files into S3. With some light reading, 20 minutes, and a new resolve to not be wasteful, we can all put money back in our pockets and save on energy costs by utilizing datacenters around the globe efficiently.&lt;/p&gt;</summary><category term="untagged"></category></entry><entry><title>Functional Ruby as a complete noob</title><link href="http://blog.dasroot.net/functional-ruby-as-a-complete-noob.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:functional-ruby-as-a-complete-noob.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Just for fun, I wanted the ability to hack up a quick document in markdown, which seems to be my new flavor of choice for writing practically anything from notes to full blown documentation sets. Problem being, not everybody or everything can read markdown. &lt;/p&gt;
&lt;h3&gt;Scenario:&lt;/h3&gt;
&lt;p&gt;I'm writing a tech spec for a service at work. Its really easy to whip up a document complete with code samples in markdown. &lt;/p&gt;
&lt;h3&gt;Problem:&lt;/h3&gt;
&lt;p&gt;It doesn't look professional AT ALL to distribute a markdown file as documentation. That and most of the business guys in windows land haven't even HEARD of markdown. &lt;/p&gt;
&lt;h3&gt;Solution:&lt;/h3&gt;
&lt;p&gt;Use ruby to convert the markdown to pretty HTML, then pipe that HTML into a PDF creation library to spit out a PDF of the documentation. &lt;/p&gt;
&lt;p&gt;I've only been dabbling in ruby for a few days. I took some TDD lessons using RSpec from my good friend &lt;a href="http://www.jessedearing.com"&gt;Jesse&lt;/a&gt; so this small script seemed like a great starting point to apply what I have learned. &lt;/p&gt;
&lt;p&gt;{% gist 2347985 %}&lt;/p&gt;
&lt;p&gt;Using the gemset RedCarpet (thanks GitHub!) and PDFKit, this was 13 lines of ruby goodness. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example Usage&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optional&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;css_for_pretty_html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ruby"></category><category term="pdf"></category><category term="markdown"></category></entry><entry><title>GIT talk with Scott Chacon of GitHub</title><link href="http://blog.dasroot.net/git-talk-with-scott-chacon-of-github.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:git-talk-with-scott-chacon-of-github.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Short post today, wanted to share an excellent screencast I ran across from Scott Chacon of GitHub on explaning git by analyzing only 12 verbs.&lt;/p&gt;
&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/ZDR433b0HJY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</summary><category term="git"></category><category term="screencast"></category></entry><entry><title>More Documentation? Really?</title><link href="http://blog.dasroot.net/more-documentation-really.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:more-documentation-really.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Documentation, it's that often forgotten about portion of every developers existence that we either loathe, or embrace and do really intelligently. I have more people joining me in my efforts, looking over what I'm doing every day that have questions about the software that we write. This leaves me often times thinking "I really wish I had written at very least an overview of what this does..." Then, when I revisit things I see that I didnt comment my code well enough to give a layman an overview of what I'm doing. (To be completely honest, I've scolded myself in private for leaving just enough comments that even I as the author of the class/method/whatever has to really think about what the code is doing.) I'm stellar at giving the just enough info to make you angry that you bothered to look kind of developer. Yikes!&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The entire time I was going through school I was cutting corners and dropping comments from boiler plate code. Stripping every ounce of text that I didn't have to copy by hand. Looking back at this habbit; it's clearly carried over into my professional life. This is frustrating to say the least, to look back over the 200 thousand + lines I've written in just the last year alone. How many of those 200k lines should have been prefixed with //? Just yesterday I would have said "maybe 10%?" Now i'm more inclined to beleive it should be 50%. &lt;/p&gt;
&lt;p&gt;The developers following me will start thanking me after I've gone through and re-commented my steps. And I think I'll gain a pat on the back from myself for doing it. But why should the buck stop there? That solves a very small portion of the problem. What about the non-technical people that dont look at the code on a daily basis and want to use a portion of my system? Right now they can't unless they ask me a million questions and expect me to sum up a usage guide in 2 paragraphs or less without being least bit technical, or they are tuning me out and moving on in true TL;DR fashion. &lt;/p&gt;
&lt;p&gt;Enter Markdown and Github Wiki's. I'm toying with the idea of the following workflow&lt;/p&gt;
&lt;h2&gt;The great idea of workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Adopt the habbit of signing EVERY method with an autodoc compatible signature&lt;/li&gt;
&lt;li&gt;Generate API reports with every milestone&lt;/li&gt;
&lt;li&gt;Parse said XML api documents - and translate into markdown&lt;/li&gt;
&lt;li&gt;Embed markdown pages in Github Wiki - with an properly indexed list of sub-pages with per-class documentation&lt;/li&gt;
&lt;li&gt;Spend 20 minutes a day at the end of my shift and document changes in the changelog&lt;/li&gt;
&lt;li&gt;Stop depending on git history for &lt;em&gt;everything&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's to hoping this helps.&lt;/p&gt;</summary><category term="resolve"></category><category term="improving-weakness"></category><category term="being-technical"></category></entry><entry><title>Sharpening the chainsaw pt. 1</title><link href="http://blog.dasroot.net/sharpening-the-chainsaw-pt-1.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:sharpening-the-chainsaw-pt-1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;I recently got into Ruby development with some help from &lt;a href="http://jessedearing.com"&gt;Jesse Dearing&lt;/a&gt; and &lt;a href="https://plus.google.com/103797989648432285071/posts"&gt;James Gifford&lt;/a&gt; and I found my shell environment to be quite a bit lacking. It wasn't Exactly vanilla, but It needed some help.&lt;/p&gt;
&lt;p&gt;I also learned quite a bit about some of the trending habits among Vim developers along the way. Upgrading my entire vim setup to use &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; instead of the mess that was my .vim directory. Essentially, pathogen offers an easy way to add plugins to your Vim setup without all the messy manual config work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Manage your 'runtimepath' with ease. In practical terms, pathogen.vim makes it super easy to install plugins and runtime files in their own private directories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Pimping vim with Pathogen&lt;/h3&gt;
&lt;p&gt;Lets take a look at this a bit closer...
&lt;!-- More --&gt;&lt;/p&gt;
&lt;p&gt;As some of you know, I use git almost religiously. And keeping my &lt;a href="https://github.com/chuckbutler/dotfiles"&gt;dotfiles&lt;/a&gt; in a repository has made system upgrades among other things a real breeze. But more on this later. &lt;em&gt;note&lt;/em&gt; dont let the extra steps in setting up your own dotfiles repository sway you from doing so. It saves so much time in the long run - simply set it, and forget it.&lt;/p&gt;
&lt;p&gt;To get started using pathogen, you simply clone the pathogen repository into your ~/.vim and move the script into your autoload directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="n"&gt;pathogen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;autoload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dont forget to add the Pathogen specific bits into your vimrc. (You read the (read)[https://github.com/tpope/vim-pathogen/blob/master/README.markdown]readme file right?)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;pathogen&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;infect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pure win, at this point. So lets grab a plugin and test drive it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/vim-scripts/The-NERD-tree.git&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will swipe the latest copy of the nerdtree plugin and keep it isolated in its own directory. Fire up vim and tell it to open the drawer&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NERDTreeToggle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see something similiar to the following&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/posts/vim-drawer.png" alt="NERDTree" /&gt;&lt;/p&gt;
&lt;p&gt;We've now confirmed that this works.. but wait.. I keep all my dotfiles in a git repository... isn't the NERDTree plugin already IN a git repository? Why would we track files in our own repository that are already published in git? This is exactly what Git Submodules were intended for. So lets start off by cleaning up what we just did, and then re-applying it as a submodule. &lt;em&gt;*sidenote - if you're not currently keeping your vim configuration/plugins version controlled, you can disregard this step&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bundle&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Nerd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Root&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;dotfiles&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/vim-scripts/The-NERD-tree.git &amp;lt;path/to/your/dot-vim/bundle/NERDTree&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will notice that this adds a new file to your repository. &lt;em&gt;.gitmodules&lt;/em&gt; This stores all the information for your submodules - and is important if you ever decide to clone your repository on another machine. More on this a bit later as well.. lets verify that NERDTree cloned itself properly. Fire up vim, and toggle NERDTree again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;NERDTreeToggle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you saw the drawer pop out, everything is working as expected. You can now clone any vim plugin into your bundle directory and without any fuss add / remove them at whill thanks to the awesomeness that is Pathogen + gitsubmodules. So, Lets just say I have two machines, my Desktop and a Laptop. I'd like to keep a consistent environment between the two, and I have all of this setup, lets just pull the updates from our dotfiles repository and verify. Go ahead and issue a git pull on the repository after you've pushed your updates. &lt;/p&gt;
&lt;h3&gt;Wat?&lt;/h3&gt;
&lt;p&gt;You see the directories, but theres &lt;strong&gt;NOTHING IN THEM!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don't panic, we have to tell git that we have submodules in this repository, and to initialize them&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running these two commands you should see git pull the repositories we've added and if you cd into them, all the files will be present and accounted for. Pure win. Lets move on&lt;/p&gt;
&lt;h2&gt;Why I switched to ZSH&lt;/h2&gt;
&lt;p&gt;The short answer: its all &lt;a href="http://jessedearing.com"&gt;Jesse's&lt;/a&gt; fault. We had a pair programming session over TMUX and i fell in love with the bell's and whistles in his ZSH setup.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/posts/zsh-shell-diagram.png" alt="ZSH Prompt Diagram" /&gt;&lt;/p&gt;
&lt;p&gt;So enough of that. How can I make the switch to ZSH?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;zsh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;If you're using a dotfiles Repository -- Follow this&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;dotfiles&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;submodule&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/robbyrussell/oh-my-zsh.git &amp;lt;path to shell files&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cloned&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;oh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zsh&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zsh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="n"&gt;dotzshrc&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zsh&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;cloned&lt;/span&gt; &lt;span class="n"&gt;oh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;zsh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subdirectory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zshrc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dotzshrc&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;chsh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;zsh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;If you're not using a dotfiles Repository&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;You might need to modify your PATH in ~/.zshrc if you’re not able to find some commands after switching to Oh My Zsh.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt; I had to change my exec params in Gnome-Terminal to launch /usr/bin/zsh instead of the system shell. I missed something somewhere, but a set once and forget it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since  &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; has some extremely good documentation - I'll point you &lt;a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/README.textile"&gt;there&lt;/a&gt; for further customization of your new shell.&lt;/p&gt;
&lt;p&gt;So in the last 20 minutes or so, we've managed to clean up Vim plugin management, and make it a breeze to port, and swapped over to a shell with some nice bells and whistles. I'll follow up with more on maintaining your dotfiles repository in part 2, and where to go from there.&lt;/p&gt;</summary><category term="git"></category><category term="unix"></category><category term="linux"></category><category term="environments"></category><category term="zsh"></category></entry><entry><title>Wasting time to relax</title><link href="http://blog.dasroot.net/wasting-time-to-relax.html" rel="alternate"></link><updated>2013-11-26T20:11:00-05:00</updated><author><name>Charles Butler</name></author><id>tag:blog.dasroot.net,2013-11-26:wasting-time-to-relax.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;This weekend I tasked myself with "not working so hard". After having spent so much time at the grind I was ready for something fresh. The excitement of developing for fun has worn thin. I wasn't about to reach for the familiar MMO's. Those are literally a timesink I have to battle myself away from every time I get started. Starcraft has gone to the hardcore players, and Diablo3 isn't here yet. What do I do?&lt;/p&gt;
&lt;p&gt;I hit my usual sources in Google Reader for gaming news, and ran across a gem. &lt;a href="http://www.terraria.org"&gt;Terraria&lt;/a&gt; is an indie game published on steam for $10 USD. Its recipe is simple. Dig up materials, craft awesomeness, unlock NPC's, fight bad guys. You can play it at your own pace - it has some solid Multiplayer support (I'm running my own dedicated server at this point I'm so addicted already). Did I mention its addictive?&lt;/p&gt;
&lt;p&gt;You don't have to take my word for it. Check out the official gameplay trailer.&lt;/p&gt;
&lt;p&gt;&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/w7uOhFTrrq0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;If you want to setup your own linux dedicated server, read on!
  &lt;!-- more --&gt;&lt;/p&gt;
&lt;p&gt;First and foremost, let me warn you. Mono is a hog - if you think you'll get away with running this on a bare-bones server, you might as well play on a public Terraria server or host it off your gaming rig. ~~Dedicated servers are goign to require at BARE MINIMUM 1 gig of ram to run well. Mono will crash out with any less than this.~~ &lt;em&gt;note&lt;/em&gt; I've since discovered that when you use the TShock packaged bin without all of the debug hooks, you &lt;em&gt;can&lt;/em&gt; run a dedicated server on an AWS micro instance - ~ 625 megs of ram. I have a server cap of 8 players and only use a medium sized world. World generation will take circa 10 minutes with this configuration - YMMV.&lt;/p&gt;
&lt;p&gt;Assuming you're using Ubuntu 11.10 - just run the following commands: (if you're running a 10.04 or prior you will need to compile mono from source)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install mono-complete&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;this takes about 5 minutes to fetch and install an on AWS Small instance&lt;/p&gt;
&lt;p&gt;Once you have completed this step - grab the TShock server binaries. TShock is a repack of the official Terraria server that comes with administration modifications, and thuse ease the setup process.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/TShock/TShock/downloads"&gt;TShock Github Project Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;wget https://github.com/TShock/TShock/tarball/master
   tar xvfz master
   cd TShock-TShock-ed6b95c &amp;amp;&amp;amp; screen mono TerrariaServerBinaries\TerrariaServer.exe&lt;/code&gt;&lt;/p&gt;
&lt;p 2332154="2332154" _="%" gist="gist"&gt;&lt;em&gt;NEW!&lt;/em&gt; OR use this handy dandy script&lt;/p&gt;
&lt;p&gt;at this point you will need to create and name your new world, assign it a port, and setup is complete!&lt;/p&gt;</summary><category term="saving-cheddar"></category><category term="gaming"></category><category term="mono"></category><category term="open-source"></category><category term="post"></category></entry></feed>